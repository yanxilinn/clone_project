import BaseFoundation, { DefaultAdapter } from '../base/foundation';
import { PresetPosition } from './foundation';
export interface YearAndMonthFoundationProps {
    currentYear?: number;
    currentMonth?: number;
    onSelect?: (obj: {
        currentMonth: number;
        currentYear: number;
    }) => void;
    onBackToMain?: () => void;
    locale?: any;
    localeCode?: string;
    monthCycled?: boolean;
    yearCycled?: boolean;
    noBackBtn?: boolean;
    disabledDate?: (date: Date) => boolean;
    density?: string;
    presetPosition?: PresetPosition;
    renderQuickControls?: any;
    renderDateInput?: any;
    yearAndMonthOpts?: any;
}
export interface YearAndMonthFoundationState {
    years: Array<{
        value: number;
        year: number;
    }>;
    months: Array<{
        value: number;
        month: number;
    }>;
    currentYear: number;
    currentMonth: number;
}
export interface YearAndMonthAdapter extends DefaultAdapter<YearAndMonthFoundationProps, YearAndMonthFoundationState> {
    setCurrentYear: (currentYear: number, cb?: () => void) => void;
    setCurrentMonth: (currentMonth: number) => void;
    notifySelectYear: (year: number) => void;
    notifySelectMonth: (month: number) => void;
    notifyBackToMain: () => void;
}
export interface MonthScrollItem {
    [k: string]: any;
    month: number;
    value: string;
    disabled: boolean;
}
export interface YearScrollItem {
    [k: string]: any;
    year: number;
    value: number;
    disabled: boolean;
}
export default class YearAndMonthFoundation extends BaseFoundation<YearAndMonthAdapter> {
    constructor(adapter: YearAndMonthAdapter);
    init(): void;
    destroy(): void;
    selectYear(item: YearScrollItem): void;
    selectMonth(item: MonthScrollItem): void;
    /**
     * After selecting a year, if the currentMonth is disabled, automatically select a non-disabled month
     */
    autoSelectMonth(item: YearScrollItem): void;
    backToMain(): void;
}
