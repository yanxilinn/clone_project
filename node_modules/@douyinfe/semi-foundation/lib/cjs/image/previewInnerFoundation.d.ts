import BaseFoundation, { DefaultAdapter } from "../base/foundation";
export interface PreviewInnerAdapter<P = Record<string, any>, S = Record<string, any>> extends DefaultAdapter<P, S> {
    getIsInGroup: () => boolean;
    notifyChange: (index: number, direction: string) => void;
    notifyZoom: (zoom: number, increase: boolean) => void;
    notifyClose: () => void;
    notifyVisibleChange: (visible: boolean) => void;
    notifyRatioChange: (type: string) => void;
    notifyRotateChange: (angle: number) => void;
    notifyDownload: (src: string, index: number) => void;
    registerKeyDownListener: () => void;
    unregisterKeyDownListener: () => void;
    getMouseActiveTime: () => number;
    getStopTiming: () => boolean;
    setStopTiming: (value: boolean) => void;
    getStartMouseDown: () => {
        x: number;
        y: number;
    };
    setStartMouseDown: (x: number, y: number) => void;
    setMouseActiveTime: (time: number) => void;
    disabledBodyScroll: () => void;
    enabledBodyScroll: () => void;
}
export default class PreviewInnerFoundation<P = Record<string, any>, S = Record<string, any>> extends BaseFoundation<PreviewInnerAdapter<P, S>, P, S> {
    constructor(adapter: PreviewInnerAdapter<P, S>);
    beforeShow(): void;
    afterHide(): void;
    handleRatio(type: string): void;
    handleViewVisibleChange: () => void;
    handleMouseMoveEvent: (e: any, event: string) => void;
    handleMouseMove: (e: any) => void;
    handleMouseUp: (e: any) => void;
    handleMouseDown: (e: any) => void;
    handleKeyDown: (e: any) => void;
    handleSwitchImage: (direction: string) => void;
    handleDownload: () => void;
    handlePreviewClose: () => void;
    handleAdjustRatio: (type: string) => void;
    handleRotateImage: (direction: string) => void;
    handleZoomImage: (newZoom: number) => void;
    preloadGapImage: () => void;
    preloadSingleImage: () => void;
    setLoadSuccessStatus: (src: string) => void;
    onImageLoad: (src: string) => void;
}
