/// <reference types="lodash" />
import BaseFoundation, { DefaultAdapter } from "../base/foundation";
export interface PreviewImageAdapter<P = Record<string, any>, S = Record<string, any>> extends DefaultAdapter<P, S> {
    getOriginImageSize: () => {
        originImageWidth: number;
        originImageHeight: number;
    };
    setOriginImageSize: (size: {
        originImageWidth: number;
        originImageHeight: number;
    }) => void;
    getContainer: () => HTMLDivElement;
    getImage: () => HTMLImageElement;
    getMouseMove: () => boolean;
    setStartMouseMove: (move: boolean) => void;
    getMouseOffset: () => {
        x: number;
        y: number;
    };
    setStartMouseOffset: (offset: {
        x: number;
        y: number;
    }) => void;
    setLoading: (loading: boolean) => void;
    setImageCursor: (canDrag: boolean) => void;
}
export interface DragDirection {
    canDragVertical: boolean;
    canDragHorizontal: boolean;
}
export interface ExtremeBounds {
    left: number;
    top: number;
}
export interface ImageOffset {
    x: number;
    y: number;
}
export default class PreviewImageFoundation<P = Record<string, any>, S = Record<string, any>> extends BaseFoundation<PreviewImageAdapter<P, S>, P, S> {
    constructor(adapter: PreviewImageAdapter<P, S>);
    _isImageVertical: () => boolean;
    _getImageBounds: () => DOMRect;
    _getContainerBounds: () => DOMRect;
    _getOffset: (e: any) => ImageOffset;
    setLoading: (loading: boolean) => void;
    handleWindowResize: () => void;
    handleLoad: (e: any) => void;
    handleError: (e: any) => void;
    handleResizeImage: () => void;
    handleRightClickImage: (e: any) => boolean;
    handleWheel: (e: any) => void;
    onWheel: import("lodash").DebouncedFunc<(e: any) => void>;
    calcCanDragDirection: () => DragDirection;
    handleZoomChange: (newZoom: number, e: any) => void;
    calcExtremeBounds: () => ExtremeBounds;
    handleMoveImage: (e: any) => void;
    handleImageMouseDown: (e: any) => void;
    handleImageMouseUp: () => void;
}
