import BaseFoundation, { DefaultAdapter } from "../base/foundation";
export interface CollapsibleFoundationProps {
    isOpen?: boolean;
    duration?: number;
    keepDOM?: boolean;
    className?: string;
    collapseHeight?: number;
    reCalcKey?: number | string;
    id?: string;
    fade?: boolean;
}
export interface CollapsibleFoundationState {
    domInRenderTree: boolean;
    domHeight: number;
    visible: boolean;
    isTransitioning: boolean;
}
export interface CollapsibleAdapter<P = Record<string, any>, S = Record<string, any>> extends DefaultAdapter<P, S> {
    setDOMInRenderTree: (isInRenderTree: boolean) => void;
    setDOMHeight: (domHeight: number) => void;
    setVisible: (visible: boolean) => void;
    setIsTransitioning: (isTransitioning: boolean) => void;
}
declare class CollapsibleFoundation extends BaseFoundation<CollapsibleAdapter<CollapsibleFoundationProps, CollapsibleFoundationState>, CollapsibleFoundationProps, CollapsibleFoundationState> {
    constructor(adapter: CollapsibleAdapter<CollapsibleFoundationProps, CollapsibleFoundationState>);
    updateDOMInRenderTree: (isInRenderTree: any) => void;
    updateDOMHeight: (domHeight: number) => void;
    updateVisible: (visible: boolean) => void;
    updateIsTransitioning: (isTransitioning: boolean) => void;
}
export default CollapsibleFoundation;
