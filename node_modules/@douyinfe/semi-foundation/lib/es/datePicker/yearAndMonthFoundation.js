import { setMonth, setYear } from 'date-fns';
import BaseFoundation from '../base/foundation';
export default class YearAndMonthFoundation extends BaseFoundation {
  constructor(adapter) {
    super(Object.assign({}, adapter));
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  init() {} // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

  selectYear(item) {
    const year = item.value;

    this._adapter.setCurrentYear(year, () => this.autoSelectMonth(item));

    this._adapter.notifySelectYear(year);
  }

  selectMonth(item) {
    const {
      month
    } = item;

    this._adapter.setCurrentMonth(month);

    this._adapter.notifySelectMonth(month);
  }
  /**
   * After selecting a year, if the currentMonth is disabled, automatically select a non-disabled month
   */


  autoSelectMonth(item) {
    const {
      disabledDate,
      locale
    } = this._adapter.getProps();

    const {
      months,
      currentMonth
    } = this._adapter.getStates();

    const currentDate = setYear(Date.now(), item.year);
    const isCurrentMonthDisabled = disabledDate(setMonth(currentDate, currentMonth - 1));

    if (isCurrentMonthDisabled) {
      const currentIndex = months.findIndex(_ref => {
        let {
          month
        } = _ref;
        return month === currentMonth;
      });
      let validMonth; // First look in the back, if you can't find it in the back, then look in the front

      validMonth = months.slice(currentIndex).find(_ref2 => {
        let {
          month
        } = _ref2;
        return !disabledDate(setMonth(currentDate, month - 1));
      });

      if (!validMonth) {
        validMonth = months.slice(0, currentIndex).find(_ref3 => {
          let {
            month
          } = _ref3;
          return !disabledDate(setMonth(currentDate, month - 1));
        });
      }

      if (validMonth) {
        this.selectMonth({
          month: validMonth.month,
          value: locale.fullMonths[validMonth.month],
          disabled: false
        });
      }
    }
  }

  backToMain() {
    this._adapter.notifyBackToMain();
  }

}