"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _stubFalse2 = _interopRequireDefault(require("lodash/stubFalse"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _yearAndMonthFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/datePicker/yearAndMonthFoundation"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _index = _interopRequireDefault(require("../scrollList/index"));

var _scrollItem = _interopRequireDefault(require("../scrollList/scrollItem"));

var _index2 = require("@douyinfe/semi-foundation/lib/cjs/datePicker/_utils/index");

var _isNullOrUndefined = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/isNullOrUndefined"));

var _iconButton = _interopRequireDefault(require("../iconButton"));

var _semiIcons = require("@douyinfe/semi-icons");

var _constants = require("@douyinfe/semi-foundation/lib/cjs/base/constants");

var _dateFns = require("date-fns");

var _constants2 = require("@douyinfe/semi-foundation/lib/cjs/datePicker/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
const prefixCls = "".concat(_constants.BASE_CLASS_PREFIX, "-datepicker");

class YearAndMonth extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.selectYear = item => {
      this.foundation.selectYear(item);
    };

    this.selectMonth = item => {
      this.foundation.selectMonth(item);
    };

    this.reselect = () => {
      const refKeys = ['yearRef', 'monthRef'];
      refKeys.forEach(key => {
        const ref = this[key];

        if (ref && ref.current && ref.current.scrollToIndex) {
          ref.current.scrollToIndex();
        }
      });
    };

    this.backToMain = e => {
      e.nativeEvent.stopImmediatePropagation();
      this.foundation.backToMain();
    };

    const now = new Date();
    let {
      currentYear,
      currentMonth
    } = props;
    currentYear = currentYear || now.getFullYear();
    currentMonth = currentMonth || now.getMonth() + 1;
    this.state = {
      years: (0, _index2.getYears)().map(year => ({
        value: year,
        year
      })),
      months: Array(12).fill(0).map((v, idx) => ({
        value: idx + 1,
        month: idx + 1
      })),
      currentYear,
      currentMonth
    };
    this.yearRef = /*#__PURE__*/_react.default.createRef();
    this.monthRef = /*#__PURE__*/_react.default.createRef();
    this.foundation = new _yearAndMonthFoundation.default(this.adapter);
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      // updateYears: years => this.setState({ years }),
      // updateMonths: months => this.setState({ months }),
      setCurrentYear: (currentYear, cb) => this.setState({
        currentYear
      }, cb),
      setCurrentMonth: currentMonth => this.setState({
        currentMonth
      }),
      notifySelectYear: year => this.props.onSelect({
        currentMonth: this.state.currentMonth,
        currentYear: year
      }),
      notifySelectMonth: month => this.props.onSelect({
        currentYear: this.state.currentYear,
        currentMonth: month
      }),
      notifyBackToMain: () => this.props.onBackToMain()
    });
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};
    const now = new Date();

    if (!(0, _isNullOrUndefined.default)(props.currentMonth) && props.currentMonth !== state.currentMonth && props.currentMonth !== 0) {
      willUpdateStates.currentMonth = props.currentMonth || now.getMonth() + 1;
    }

    if ((0, _isNullOrUndefined.default)(props.currentYear) && props.currentYear !== state.currentYear && props.currentYear !== 0) {
      willUpdateStates.currentYear = props.currentYear || now.getFullYear();
    }

    return willUpdateStates;
  }

  renderColYear() {
    const {
      years,
      currentYear,
      currentMonth,
      months
    } = this.state;
    const {
      disabledDate,
      localeCode,
      yearCycled,
      yearAndMonthOpts
    } = this.props;
    const currentDate = (0, _dateFns.setMonth)(Date.now(), currentMonth - 1);
    const list = years.map(_ref => {
      let {
        value,
        year
      } = _ref;
      const isAllMonthDisabled = months.every(_ref2 => {
        let {
          month
        } = _ref2;
        return disabledDate((0, _dateFns.set)(currentDate, {
          year,
          month: month - 1
        }));
      });
      return {
        year,
        value,
        disabled: isAllMonthDisabled
      };
    });

    let transform = val => val;

    if (localeCode === 'zh-CN' || localeCode === 'zh-TW') {
      // Only Chinese needs to add [year] after the selected year
      transform = val => "".concat(val, "\u5E74");
    }

    return /*#__PURE__*/_react.default.createElement(_scrollItem.default, Object.assign({
      ref: this.yearRef,
      cycled: yearCycled,
      list: list,
      transform: transform,
      selectedIndex: years.findIndex(item => item.value === currentYear),
      type: "year",
      onSelect: this.selectYear,
      mode: "normal"
    }, yearAndMonthOpts));
  }

  renderColMonth() {
    const {
      months,
      currentMonth,
      currentYear
    } = this.state;
    const {
      locale,
      localeCode,
      monthCycled,
      disabledDate,
      yearAndMonthOpts
    } = this.props;

    let transform = val => val;

    const currentDate = (0, _dateFns.setYear)(Date.now(), currentYear);

    if (localeCode === 'zh-CN' || localeCode === 'zh-TW') {
      // Only Chinese needs to add [month] after the selected month
      transform = val => "".concat(val, "\u6708");
    } // i18n


    const list = months.map(_ref3 => {
      let {
        value,
        month
      } = _ref3;
      return {
        month,
        disabled: disabledDate((0, _dateFns.setMonth)(currentDate, month - 1)),
        value: locale.fullMonths[value] // Actual rendered text

      };
    });
    const selectedIndex = list.findIndex(item => item.month === currentMonth);
    return /*#__PURE__*/_react.default.createElement(_scrollItem.default, Object.assign({
      ref: this.monthRef,
      cycled: monthCycled,
      list: list,
      transform: transform,
      selectedIndex: selectedIndex,
      type: "month",
      onSelect: this.selectMonth,
      mode: 'normal'
    }, yearAndMonthOpts));
  }

  render() {
    const {
      locale,
      noBackBtn,
      density,
      presetPosition,
      renderQuickControls,
      renderDateInput
    } = this.props;
    const prefix = "".concat(prefixCls, "-yearmonth-header"); // i18n

    const selectDateText = locale.selectDate;
    const iconSize = density === 'compact' ? 'default' : 'large';
    const buttonSize = density === 'compact' ? 'small' : 'default';
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, noBackBtn ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: prefix
    }, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      noHorizontalPadding: false,
      icon: /*#__PURE__*/_react.default.createElement(_semiIcons.IconChevronLeft, {
        "aria-hidden": true,
        size: iconSize
      }),
      size: buttonSize,
      onClick: this.backToMain
    }, /*#__PURE__*/_react.default.createElement("span", null, selectDateText))), presetPosition ? /*#__PURE__*/_react.default.createElement("div", {
      style: {
        display: 'flex'
      }
    }, presetPosition === "left" && renderQuickControls, /*#__PURE__*/_react.default.createElement("div", null, renderDateInput, /*#__PURE__*/_react.default.createElement(_index.default, null, this.renderColYear(), this.renderColMonth())), presetPosition === "right" && renderQuickControls) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderDateInput, /*#__PURE__*/_react.default.createElement(_index.default, null, this.renderColYear(), this.renderColMonth())));
  }

}

YearAndMonth.propTypes = {
  currentYear: _propTypes.default.number,
  currentMonth: _propTypes.default.number,
  onSelect: _propTypes.default.func,
  locale: _propTypes.default.object,
  localeCode: _propTypes.default.string,
  monthCycled: _propTypes.default.bool,
  yearCycled: _propTypes.default.bool,
  noBackBtn: _propTypes.default.bool,
  disabledDate: _propTypes.default.func,
  density: _propTypes.default.string,
  presetPosition: _propTypes.default.oneOf(_constants2.strings.PRESET_POSITION_SET),
  renderQuickControls: _propTypes.default.node,
  renderDateInput: _propTypes.default.node
};
YearAndMonth.defaultProps = {
  disabledDate: _stubFalse2.default,
  monthCycled: false,
  yearCycled: false,
  noBackBtn: false,
  onSelect: _noop2.default
};
var _default = YearAndMonth;
exports.default = _default;