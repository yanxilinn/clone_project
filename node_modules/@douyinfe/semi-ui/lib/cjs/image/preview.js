"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _react = _interopRequireDefault(require("react"));

var _previewContext = require("./previewContext");

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _previewInner = _interopRequireDefault(require("./previewInner"));

var _previewFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/image/previewFoundation"));

var _uuid = require("@douyinfe/semi-foundation/lib/cjs/utils/uuid");

var _constants = require("@douyinfe/semi-foundation/lib/cjs/image/constants");

require("@douyinfe/semi-foundation/lib/cjs/image/image.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

const prefixCls = _constants.cssClasses.PREFIX;

class Preview extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.handleVisibleChange = newVisible => {
      this.foundation.handleVisibleChange(newVisible);
    };

    this.handleCurrentIndexChange = index => {
      this.foundation.handleCurrentIndexChange(index);
    };

    this.loopImageIndex = () => {
      const {
        children
      } = this.props;
      let index = 0;
      const srcListInChildren = [];
      const titles = [];

      const loop = children => {
        return _react.default.Children.map(children, child => {
          var _a;

          if (child && child.props && child.type) {
            if (child.type.isSemiImage) {
              const {
                src,
                preview,
                alt
              } = child.props;

              if (preview) {
                const previewSrc = (0, _isObject2.default)(preview) ? (_a = preview.src) !== null && _a !== void 0 ? _a : src : src;
                srcListInChildren.push(previewSrc);
                titles.push(preview === null || preview === void 0 ? void 0 : preview.previewTitle);
                return /*#__PURE__*/_react.default.cloneElement(child, {
                  imageID: index++
                });
              }

              return child;
            }
          }

          if (child && child.props && child.props.children) {
            return /*#__PURE__*/_react.default.cloneElement(child, {
              children: loop(child.props.children)
            });
          }

          return child;
        });
      };

      return {
        srcListInChildren,
        newChildren: loop(children),
        titles
      };
    };

    this.state = {
      currentIndex: props.currentIndex || props.defaultCurrentIndex || 0,
      visible: props.visible || props.currentDefaultVisible || false
    };
    this.foundation = new _previewFoundation.default(this.adapter);
    this.previewGroupId = (0, _uuid.getUuidShort)({
      prefix: "semi-image-preview-group",
      length: 4
    });
    this.previewRef = /*#__PURE__*/_react.default.createRef();
  }

  get adapter() {
    return Object.assign({}, super.adapter);
  }

  componentDidMount() {
    const {
      lazyLoadMargin
    } = this.props;
    const allElement = document.querySelectorAll(".".concat(prefixCls, "-img")); // use IntersectionObserver to lazy load image

    const observer = new IntersectionObserver(entries => {
      entries.forEach(item => {
        var _a;

        const src = (_a = item.target.dataset) === null || _a === void 0 ? void 0 : _a.src;

        if (item.isIntersecting && src) {
          item.target.src = src;
          observer.unobserve(item.target);
        }
      });
    }, {
      root: document.querySelector("#".concat(this.previewGroupId)),
      rootMargin: lazyLoadMargin
    });
    allElement.forEach(item => observer.observe(item));
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if ("currentIndex" in props && props.currentIndex !== state.currentIndex) {
      willUpdateStates.currentIndex = props.currentIndex;
    }

    if ("visible" in props && props.visible !== state.visible) {
      willUpdateStates.visible = props.visible;
    }

    return willUpdateStates;
  }

  render() {
    const _a = this.props,
          {
      src,
      style,
      lazyLoad
    } = _a,
          restProps = __rest(_a, ["src", "style", "lazyLoad"]);

    const {
      currentIndex,
      visible
    } = this.state;
    const {
      srcListInChildren,
      newChildren,
      titles
    } = this.loopImageIndex();
    const srcArr = Array.isArray(src) ? src : typeof src === "string" ? [src] : [];
    const finalSrcList = [...srcArr, ...srcListInChildren];
    return /*#__PURE__*/_react.default.createElement(_previewContext.PreviewContext.Provider, {
      value: {
        isGroup: true,
        previewSrc: finalSrcList,
        titles: titles,
        currentIndex,
        visible,
        lazyLoad,
        setCurrentIndex: this.handleCurrentIndexChange,
        handleVisibleChange: this.handleVisibleChange
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: this.previewGroupId,
      style: style,
      className: "".concat(prefixCls, "-preview-group")
    }, newChildren), /*#__PURE__*/_react.default.createElement(_previewInner.default, Object.assign({}, restProps, {
      ref: this.previewRef,
      src: finalSrcList,
      currentIndex: currentIndex,
      visible: visible,
      onVisibleChange: this.handleVisibleChange
    })));
  }

}

exports.default = Preview;
Preview.propTypes = {
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  visible: _propTypes.default.bool,
  src: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array]),
  currentIndex: _propTypes.default.number,
  defaultIndex: _propTypes.default.number,
  defaultVisible: _propTypes.default.bool,
  maskClosable: _propTypes.default.bool,
  closable: _propTypes.default.bool,
  zoomStep: _propTypes.default.number,
  infinite: _propTypes.default.bool,
  showTooltip: _propTypes.default.bool,
  closeOnEsc: _propTypes.default.bool,
  prevTip: _propTypes.default.string,
  nextTip: _propTypes.default.string,
  zoomInTip: _propTypes.default.string,
  zoomOutTip: _propTypes.default.string,
  downloadTip: _propTypes.default.string,
  adaptiveTip: _propTypes.default.string,
  originTip: _propTypes.default.string,
  lazyLoad: _propTypes.default.bool,
  lazyLoadMargin: _propTypes.default.string,
  preLoad: _propTypes.default.bool,
  preLoadGap: _propTypes.default.number,
  disableDownload: _propTypes.default.bool,
  zIndex: _propTypes.default.number,
  renderHeader: _propTypes.default.func,
  renderPreviewMenu: _propTypes.default.func,
  getPopupContainer: _propTypes.default.func,
  onVisibleChange: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onClose: _propTypes.default.func,
  onZoomIn: _propTypes.default.func,
  onZoomOut: _propTypes.default.func,
  onPrev: _propTypes.default.func,
  onNext: _propTypes.default.func,
  onDownload: _propTypes.default.func,
  onRotateLeft: _propTypes.default.func,
  onRatioChange: _propTypes.default.func
};
Preview.defaultProps = {
  src: [],
  lazyLoad: true,
  lazyLoadMargin: "0px 100px 100px 0px"
};