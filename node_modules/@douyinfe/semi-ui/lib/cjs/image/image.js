"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _isBoolean2 = _interopRequireDefault(require("lodash/isBoolean"));

var _react = _interopRequireDefault(require("react"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/image/constants");

var _classnames = _interopRequireDefault(require("classnames"));

var _semiIcons = require("@douyinfe/semi-icons");

var _previewInner = _interopRequireDefault(require("./previewInner"));

var _previewContext = require("./previewContext");

var _imageFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/image/imageFoundation"));

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

var _skeleton = _interopRequireDefault(require("../skeleton"));

require("@douyinfe/semi-foundation/lib/cjs/image/image.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/no-static-element-interactions */
const prefixCls = _constants.cssClasses.PREFIX;

class Image extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.handleClick = e => {
      this.foundation.handleClick(e);
    };

    this.handleLoaded = e => {
      this.foundation.handleLoaded(e);
    };

    this.handleError = e => {
      this.foundation.handleError(e);
    };

    this.handlePreviewVisibleChange = visible => {
      this.foundation.handlePreviewVisibleChange(visible);
    };

    this.renderDefaultLoading = () => {
      const {
        width,
        height
      } = this.props;
      return /*#__PURE__*/_react.default.createElement(_skeleton.default.Image, {
        style: {
          width,
          height
        }
      });
    };

    this.renderDefaultError = () => {
      const prefixClsName = "".concat(prefixCls, "-status");
      return /*#__PURE__*/_react.default.createElement("div", {
        className: prefixClsName
      }, /*#__PURE__*/_react.default.createElement(_semiIcons.IconUploadError, {
        size: "extra-large"
      }));
    };

    this.renderLoad = () => {
      const prefixClsName = "".concat(prefixCls, "-status");
      const {
        placeholder
      } = this.props;
      return placeholder ? /*#__PURE__*/_react.default.createElement("div", {
        className: prefixClsName
      }, placeholder) : this.renderDefaultLoading();
    };

    this.renderError = () => {
      const {
        fallback
      } = this.props;
      const prefixClsName = "".concat(prefixCls, "-status");
      const fallbackNode = typeof fallback === "string" ? /*#__PURE__*/_react.default.createElement("img", {
        style: {
          width: "100%",
          height: "100%"
        },
        src: fallback,
        alt: "fallback"
      }) : fallback;
      return fallback ? /*#__PURE__*/_react.default.createElement("div", {
        className: prefixClsName
      }, fallbackNode) : this.renderDefaultError();
    };

    this.renderExtra = () => {
      const {
        loadStatus
      } = this.state;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "-overlay")
      }, loadStatus === "error" && this.renderError(), loadStatus === "loading" && this.renderLoad());
    };

    this.getLocalTextByKey = key => /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
      componentName: "Image"
    }, locale => locale[key]);

    this.renderMask = () => /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-mask")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-mask-info")
    }, /*#__PURE__*/_react.default.createElement(_semiIcons.IconEyeOpened, {
      size: "extra-large"
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "".concat(prefixCls, "-mask-info-text")
    }, this.getLocalTextByKey("preview"))));

    this.state = {
      src: "",
      loadStatus: "loading",
      previewVisible: false
    };
    this.foundation = new _imageFoundation.default(this.adapter);
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      getIsInGroup: () => this.isInGroup()
    });
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if (props.src !== state.src) {
      willUpdateStates.src = props.src;
      willUpdateStates.loadStatus = "loading";
    }

    if ((0, _isObject2.default)(props.preview)) {
      const {
        visible
      } = props.preview;

      if ((0, _isBoolean2.default)(visible)) {
        willUpdateStates.previewVisible = visible;
      }
    }

    return willUpdateStates;
  }

  isInGroup() {
    return Boolean(this.context && this.context.isGroup);
  }

  isLazyLoad() {
    if (this.context) {
      return this.context.lazyLoad;
    }

    return false;
  }

  render() {
    var _a;

    const {
      src,
      loadStatus,
      previewVisible
    } = this.state;
    const {
      width,
      height,
      alt,
      style,
      className,
      crossOrigin,
      preview
    } = this.props;
    const outerStyle = Object.assign({
      width,
      height
    }, style);
    const outerCls = (0, _classnames.default)(prefixCls, className);
    const canPreview = loadStatus === "success" && preview && !this.isInGroup();
    const showPreviewCursor = preview && loadStatus === "success";
    const previewSrc = (0, _isObject2.default)(preview) ? (_a = preview.src) !== null && _a !== void 0 ? _a : src : src;
    const previewProps = (0, _isObject2.default)(preview) ? preview : {};
    return (
      /*#__PURE__*/
      // eslint-disable jsx-a11y/no-static-element-interactions
      // eslint-disable jsx-a11y/click-events-have-key-events
      _react.default.createElement("div", {
        style: outerStyle,
        className: outerCls,
        onClick: this.handleClick
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: this.isInGroup() && this.isLazyLoad() ? undefined : src,
        "data-src": src,
        alt: alt,
        className: (0, _classnames.default)("".concat(prefixCls, "-img"), {
          ["".concat(prefixCls, "-img-preview")]: showPreviewCursor,
          ["".concat(prefixCls, "-img-error")]: loadStatus === "error"
        }),
        width: width,
        height: height,
        crossOrigin: crossOrigin,
        onError: this.handleError,
        onLoad: this.handleLoaded
      }), loadStatus !== "success" && this.renderExtra(), canPreview && /*#__PURE__*/_react.default.createElement(_previewInner.default, Object.assign({}, previewProps, {
        src: previewSrc,
        visible: previewVisible,
        onVisibleChange: this.handlePreviewVisibleChange,
        crossOrigin: !(0, _isUndefined2.default)(crossOrigin) ? crossOrigin : previewProps === null || previewProps === void 0 ? void 0 : previewProps.crossOrigin
      })))
    );
  }

}

exports.default = Image;
Image.isSemiImage = true;
Image.contextType = _previewContext.PreviewContext;
Image.propTypes = {
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  src: _propTypes.default.string,
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  alt: _propTypes.default.string,
  placeholder: _propTypes.default.node,
  fallback: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  preview: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.object]),
  onLoad: _propTypes.default.func,
  onError: _propTypes.default.func,
  crossOrigin: _propTypes.default.string,
  imageID: _propTypes.default.number
};
Image.defaultProps = {
  preview: true
};