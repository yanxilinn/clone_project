"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _throttle2 = _interopRequireDefault(require("lodash/throttle"));

var _react = _interopRequireDefault(require("react"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _semiIcons = require("@douyinfe/semi-icons");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _divider = _interopRequireDefault(require("../divider"));

var _slider = _interopRequireDefault(require("../slider"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/image/constants");

var _classnames = _interopRequireDefault(require("classnames"));

var _previewFooterFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/image/previewFooterFoundation"));

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const prefixCls = _constants.cssClasses.PREFIX;
const footerPrefixCls = "".concat(_constants.cssClasses.PREFIX, "-preview-footer");
let mouseActiveTime = 0;

class Footer extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.changeSliderValue = type => {
      this.foundation.changeSliderValue(type);
    };

    this.handleMinusClick = () => {
      this.changeSliderValue("minus");
    };

    this.handlePlusClick = () => {
      this.changeSliderValue("plus");
    };

    this.handleRotateLeft = () => {
      this.foundation.handleRotate("left");
    };

    this.handleRotateRight = () => {
      this.foundation.handleRotate("right");
    };

    this.handleSlideChange = (0, _throttle2.default)(value => {
      this.foundation.handleValueChange(value);
    }, 50);

    this.handleRatioClick = () => {
      this.foundation.handleRatioClick();
    };

    this.customRenderViewMenu = () => {
      const {
        min,
        max,
        step,
        curPage,
        totalNum,
        ratio,
        zoom,
        disabledPrev,
        disabledNext,
        disableDownload,
        onNext,
        onPrev,
        onDownload,
        renderPreviewMenu
      } = this.props;
      const props = {
        min,
        max,
        step,
        curPage,
        totalNum,
        ratio,
        zoom,
        disabledPrev,
        disabledNext,
        disableDownload,
        onNext,
        onPrev,
        onDownload,
        onRotateLeft: this.handleRotateLeft,
        onRotateRight: this.handleRotateRight,
        disabledZoomIn: zoom === max,
        disabledZoomOut: zoom === min,
        onRatioClick: this.handleRatioClick,
        onZoomIn: this.handlePlusClick,
        onZoomOut: this.handleMinusClick
      };
      return renderPreviewMenu(props);
    }; // According to showTooltip in props, decide whether to use Tooltip to pack a layer
    // 根据 props 中的 showTooltip 决定是否使用 Tooltip 包一层


    this.getFinalIconElement = (element, content) => {
      const {
        showTooltip
      } = this.props;
      return showTooltip ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        content: content
      }, element) : element;
    };

    this.getLocalTextByKey = key => /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
      componentName: "Image"
    }, locale => locale[key]);

    this.getIconChevronLeft = () => {
      const {
        disabledPrev,
        onPrev,
        prevTip
      } = this.props;

      const icon = /*#__PURE__*/_react.default.createElement(_semiIcons.IconChevronLeft, {
        size: "large",
        className: disabledPrev ? "".concat(footerPrefixCls, "-disabled") : "",
        onClick: !disabledPrev ? onPrev : undefined
      });

      const content = prevTip !== null && prevTip !== void 0 ? prevTip : this.getLocalTextByKey("prevTip");
      return this.getFinalIconElement(icon, content);
    };

    this.getIconChevronRight = () => {
      const {
        disabledNext,
        onNext,
        nextTip
      } = this.props;

      const icon = /*#__PURE__*/_react.default.createElement(_semiIcons.IconChevronRight, {
        size: "large",
        className: disabledNext ? "".concat(footerPrefixCls, "-disabled") : "",
        onClick: !disabledNext ? onNext : undefined
      });

      const content = nextTip !== null && nextTip !== void 0 ? nextTip : this.getLocalTextByKey("nextTip");
      return this.getFinalIconElement(icon, content);
    };

    this.getIconMinus = () => {
      const {
        zoomOutTip,
        zoom,
        min
      } = this.props;
      const disabledZoomOut = zoom === min;

      const icon = /*#__PURE__*/_react.default.createElement(_semiIcons.IconMinus, {
        size: "large",
        onClick: !disabledZoomOut ? this.handleMinusClick : undefined,
        className: disabledZoomOut ? "".concat(footerPrefixCls, "-disabled") : ""
      });

      const content = zoomOutTip !== null && zoomOutTip !== void 0 ? zoomOutTip : this.getLocalTextByKey("zoomOutTip");
      return this.getFinalIconElement(icon, content);
    };

    this.getIconPlus = () => {
      const {
        zoomInTip,
        zoom,
        max
      } = this.props;
      const disabledZoomIn = zoom === max;

      const icon = /*#__PURE__*/_react.default.createElement(_semiIcons.IconPlus, {
        size: "large",
        onClick: !disabledZoomIn ? this.handlePlusClick : undefined,
        className: disabledZoomIn ? "".concat(footerPrefixCls, "-disabled") : ""
      });

      const content = zoomInTip !== null && zoomInTip !== void 0 ? zoomInTip : this.getLocalTextByKey("zoomInTip");
      return this.getFinalIconElement(icon, content);
    };

    this.getIconRatio = () => {
      const {
        ratio,
        originTip,
        adaptiveTip
      } = this.props;
      const props = {
        size: "large",
        className: (0, _classnames.default)("".concat(footerPrefixCls, "-gap")),
        onClick: this.handleRatioClick
      };
      const icon = ratio === "adaptation" ? /*#__PURE__*/_react.default.createElement(_semiIcons.IconRealSizeStroked, Object.assign({}, props)) : /*#__PURE__*/_react.default.createElement(_semiIcons.IconWindowAdaptionStroked, Object.assign({}, props));
      let content;

      if (ratio === "adaptation") {
        content = originTip !== null && originTip !== void 0 ? originTip : this.getLocalTextByKey("originTip");
      } else {
        content = adaptiveTip !== null && adaptiveTip !== void 0 ? adaptiveTip : this.getLocalTextByKey("adaptiveTip");
      }

      return this.getFinalIconElement(icon, content);
    };

    this.getIconRotate = () => {
      const {
        rotateTip
      } = this.props;

      const icon = /*#__PURE__*/_react.default.createElement(_semiIcons.IconRotate, {
        size: "large",
        onClick: this.handleRotateLeft
      });

      const content = rotateTip !== null && rotateTip !== void 0 ? rotateTip : this.getLocalTextByKey("rotateTip");
      return this.getFinalIconElement(icon, content);
    };

    this.getIconDownload = () => {
      const {
        downloadTip,
        onDownload,
        disableDownload
      } = this.props;

      const icon = /*#__PURE__*/_react.default.createElement(_semiIcons.IconDownload, {
        size: "large",
        onClick: !disableDownload ? onDownload : undefined,
        className: (0, _classnames.default)("".concat(footerPrefixCls, "-gap"), {
          ["".concat(footerPrefixCls, "-disabled")]: disableDownload
        })
      });

      const content = downloadTip !== null && downloadTip !== void 0 ? downloadTip : this.getLocalTextByKey("downloadTip");
      return this.getFinalIconElement(icon, content);
    };

    this.foundation = new _previewFooterFoundation.default(this.adapter);
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      setStartMouseOffset: time => {
        mouseActiveTime = time;
      }
    });
  }

  render() {
    const {
      min,
      max,
      step,
      curPage,
      totalNum,
      zoom,
      showTooltip,
      className,
      renderPreviewMenu
    } = this.props;

    if (renderPreviewMenu) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(footerPrefixCls, "-wrapper")
      }, this.customRenderViewMenu());
    }

    return /*#__PURE__*/_react.default.createElement("section", {
      className: (0, _classnames.default)(footerPrefixCls, "".concat(footerPrefixCls, "-wrapper"), className)
    }, this.getIconChevronLeft(), /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(footerPrefixCls, "-page")
    }, /*#__PURE__*/_react.default.createElement("span", null, curPage), /*#__PURE__*/_react.default.createElement("span", null, "/"), /*#__PURE__*/_react.default.createElement("span", null, totalNum)), this.getIconChevronRight(), /*#__PURE__*/_react.default.createElement(_divider.default, {
      layout: "vertical"
    }), this.getIconMinus(), /*#__PURE__*/_react.default.createElement(_slider.default, {
      value: zoom,
      min: min,
      max: max,
      step: step,
      tipFormatter: v => "".concat(v, "%"),
      tooltipVisible: showTooltip ? undefined : false,
      onChange: this.handleSlideChange
    }), this.getIconPlus(), this.getIconRatio(), /*#__PURE__*/_react.default.createElement(_divider.default, {
      layout: "vertical"
    }), this.getIconRotate(), this.getIconDownload());
  }

}

exports.default = Footer;
Footer.propTypes = {
  curPage: _propTypes.default.number,
  totalNum: _propTypes.default.number,
  disabledPrev: _propTypes.default.bool,
  disabledNext: _propTypes.default.bool,
  disableDownload: _propTypes.default.bool,
  className: _propTypes.default.string,
  zoom: _propTypes.default.number,
  ratio: _propTypes.default.string,
  prevTip: _propTypes.default.string,
  nextTip: _propTypes.default.string,
  zoomInTip: _propTypes.default.string,
  zoomOutTip: _propTypes.default.string,
  rotateTip: _propTypes.default.string,
  downloadTip: _propTypes.default.string,
  adaptiveTip: _propTypes.default.string,
  originTip: _propTypes.default.string,
  showTooltip: _propTypes.default.bool,
  onZoomIn: _propTypes.default.func,
  onZoomOut: _propTypes.default.func,
  onPrev: _propTypes.default.func,
  onNext: _propTypes.default.func,
  onAdjustRatio: _propTypes.default.func,
  onRotateLeft: _propTypes.default.func,
  onDownload: _propTypes.default.func
};
Footer.defaultProps = {
  min: 10,
  max: 500,
  step: 10,
  showTooltip: false,
  disableDownload: false
};