"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

require("@douyinfe/semi-foundation/lib/cjs/timeline/timeline.css");

var _constants = require("@douyinfe/semi-foundation/lib/cjs/timeline/constants");

var _context = _interopRequireDefault(require("../configProvider/context"));

var _item = _interopRequireDefault(require("./item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const prefixCls = _constants.cssClasses.PREFIX;

class Timeline extends _react.PureComponent {
  constructor() {
    super(...arguments);

    this.getPosCls = (ele, idx) => {
      const {
        mode
      } = this.props;

      if (mode === 'alternate') {
        if (ele.props.position) {
          return "".concat(prefixCls, "-item-").concat(ele.props.position);
        }

        return idx % 2 === 0 ? "".concat(prefixCls, "-item-left") : "".concat(prefixCls, "-item-right");
      }

      if (mode === 'center') {
        if (ele.props.position) {
          return "".concat(prefixCls, "-item-").concat(ele.props.position);
        }

        return "".concat(prefixCls, "-item-left");
      }

      if (mode === 'left' || mode === 'right') {
        return "".concat(prefixCls, "-item-").concat(mode);
      }

      if (ele.props.position) {
        return "".concat(prefixCls, "-item-").concat(ele.props.position);
      }

      return '';
    };

    this.addClassName = items => _react.default.Children.map(items, (ele, idx) => {
      if ( /*#__PURE__*/_react.default.isValidElement(ele)) {
        return /*#__PURE__*/_react.default.cloneElement(ele, {
          // @ts-ignore
          className: (0, _classnames.default)(ele.props.className, this.getPosCls(ele, idx))
        });
      }

      return ele;
    });
  }

  render() {
    const {
      children,
      className,
      style,
      mode,
      dataSource
    } = this.props;
    const classString = (0, _classnames.default)(prefixCls, className, {
      ["".concat(prefixCls, "-").concat(mode)]: mode
    });
    let childrenList;

    if (dataSource && dataSource.length) {
      const items = dataSource.map((item, index) => /*#__PURE__*/_react.default.createElement(_item.default, Object.assign({
        key: "timeline-item-".concat(index)
      }, item), item.content));
      childrenList = this.addClassName(items);
    }

    const items = childrenList || this.addClassName(children);
    return /*#__PURE__*/_react.default.createElement("ul", {
      "aria-label": this.props['aria-label'],
      style: style,
      className: classString
    }, items);
  }

}

Timeline.contextType = _context.default;
Timeline.Item = _item.default;
Timeline.propTypes = {
  mode: _propTypes.default.oneOf(_constants.strings.MODE),
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  dataSource: _propTypes.default.array
};
Timeline.defaultProps = {
  mode: 'left'
};
var _default = Timeline;
exports.default = _default;