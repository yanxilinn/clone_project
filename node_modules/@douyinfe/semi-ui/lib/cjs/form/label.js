"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/form/constants");

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const prefixCls = _constants.cssClasses.PREFIX;

class Label extends _react.PureComponent {
  render() {
    const {
      children,
      required,
      text,
      disabled,
      name,
      width,
      align,
      style,
      className,
      extra,
      id,
      optional
    } = this.props;
    const labelCls = (0, _classnames.default)(className, {
      ["".concat(prefixCls, "-field-label")]: true,
      ["".concat(prefixCls, "-field-label-left")]: align === 'left',
      ["".concat(prefixCls, "-field-label-right")]: align === 'right',
      ["".concat(prefixCls, "-field-label-required")]: required,
      ["".concat(prefixCls, "-field-label-disabled")]: disabled,
      ["".concat(prefixCls, "-field-label-with-extra")]: extra
    });
    const labelStyle = style ? style : {};
    width ? labelStyle.width = width : null;

    const optionalText = /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
      componentName: "Form"
    }, locale => /*#__PURE__*/_react.default.createElement("span", {
      className: "".concat(prefixCls, "-field-label-optional-text")
    }, locale.optional));

    const textContent = /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-field-label-text"),
      "x-semi-prop": "label"
    }, typeof text !== 'undefined' ? text : children, optional ? optionalText : null);

    const contentWithExtra = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, textContent, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-field-label-extra")
    }, extra));

    return /*#__PURE__*/_react.default.createElement("label", {
      className: labelCls,
      htmlFor: name,
      style: labelStyle,
      id: id
    }, extra ? contentWithExtra : textContent);
  }

}

exports.default = Label;
Label.defaultProps = {
  required: false,
  name: '',
  align: 'left',
  className: '',
  optional: false
};
Label.propTypes = {
  id: _propTypes.default.string,
  children: _propTypes.default.node,
  required: _propTypes.default.bool,
  text: _propTypes.default.node,
  disabled: _propTypes.default.bool,
  name: _propTypes.default.string,
  align: _propTypes.default.string,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  extra: _propTypes.default.node,
  optional: _propTypes.default.bool
};