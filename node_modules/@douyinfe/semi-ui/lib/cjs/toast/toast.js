"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context = _interopRequireDefault(require("../configProvider/context"));

var _toastFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/toast/toastFoundation"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/toast/constants");

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _index = _interopRequireDefault(require("../iconButton/index"));

var _semiIcons = require("@douyinfe/semi-icons");

var _utils = require("../_utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
const prefixCls = _constants.cssClasses.PREFIX;

class Toast extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.clearCloseTimer = () => {
      this.foundation.clearCloseTimer_();
    };

    this.startCloseTimer = () => {
      this.foundation.startCloseTimer_();
    };

    this.restartCloseTimer = () => {
      this.foundation.restartCloseTimer();
    };

    this.state = {};
    this.foundation = new _toastFoundation.default(this.adapter);
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      notifyWrapperToRemove: id => {
        this.props.close(id);
      },
      notifyClose: () => {
        this.props.onClose();
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  close(e) {
    this.foundation.close(e);
  }

  renderIcon() {
    const {
      type,
      icon
    } = this.props;
    const iconMap = {
      warning: /*#__PURE__*/_react.default.createElement(_semiIcons.IconAlertTriangle, null),
      success: /*#__PURE__*/_react.default.createElement(_semiIcons.IconTickCircle, null),
      info: /*#__PURE__*/_react.default.createElement(_semiIcons.IconInfoCircle, null),
      error: /*#__PURE__*/_react.default.createElement(_semiIcons.IconAlertCircle, null)
    };
    const iconType = iconMap[type];
    const iconSize = 'large';
    const iconCls = (0, _classnames.default)("".concat(prefixCls, "-icon"), "".concat(prefixCls, "-icon-").concat(type));

    if (icon) {
      return (0, _utils.isSemiIcon)(icon) ? /*#__PURE__*/_react.default.cloneElement(icon, {
        size: iconSize,
        className: "".concat(prefixCls, "-icon")
      }) : icon;
    }

    if (type && iconType) {
      return /*#__PURE__*/_react.default.cloneElement(iconType, {
        size: iconSize,
        className: iconCls
      });
    }

    return null;
  }

  render() {
    const {
      content,
      type,
      theme,
      showClose,
      textMaxWidth,
      className,
      style
    } = this.props;
    const direction = this.props.direction || this.context.direction;
    const toastCls = (0, _classnames.default)(prefixCls, className, {
      ["".concat(prefixCls, "-").concat(type)]: true,
      ["".concat(prefixCls, "-").concat(theme)]: theme === 'light',
      ["".concat(prefixCls, "-rtl")]: direction === 'rtl'
    });
    const textStyle = {};
    textStyle.maxWidth = textMaxWidth;
    const btnTheme = 'borderless';
    const btnSize = 'small';
    return /*#__PURE__*/_react.default.createElement("div", {
      role: "alert",
      "aria-label": "".concat(type ? type : 'default', " type"),
      className: toastCls,
      style: style,
      onMouseEnter: this.clearCloseTimer,
      onMouseLeave: this.startCloseTimer,
      onAnimationStart: this.props.onAnimationStart,
      onAnimationEnd: this.props.onAnimationEnd
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, this.renderIcon(), /*#__PURE__*/_react.default.createElement("span", {
      className: "".concat(prefixCls, "-content-text"),
      style: textStyle,
      "x-semi-prop": "content"
    }, content), showClose && /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-close-button")
    }, /*#__PURE__*/_react.default.createElement(_index.default, {
      onClick: e => this.close(e),
      type: "tertiary",
      icon: /*#__PURE__*/_react.default.createElement(_semiIcons.IconClose, {
        "x-semi-prop": "icon"
      }),
      theme: btnTheme,
      size: btnSize
    }))));
  }

}

Toast.contextType = _context.default;
Toast.propTypes = {
  onClose: _propTypes.default.func,
  content: _propTypes.default.node,
  close: _propTypes.default.func,
  duration: _propTypes.default.number,
  theme: _propTypes.default.oneOf(_constants.strings.themes),
  type: _propTypes.default.oneOf(_constants.strings.types),
  textMaxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  showClose: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  direction: _propTypes.default.oneOf(_constants.strings.directions)
};
Toast.defaultProps = {
  onClose: _noop2.default,
  content: '',
  close: _noop2.default,
  duration: _constants.numbers.duration,
  textMaxWidth: 450,
  showClose: true,
  theme: 'normal'
};
var _default = Toast;
exports.default = _default;