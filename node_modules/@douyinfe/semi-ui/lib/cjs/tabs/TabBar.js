"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/tabs/constants");

var _getDataAttr = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/getDataAttr"));

var _overflowList = _interopRequireDefault(require("../overflowList"));

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _button = _interopRequireDefault(require("../button"));

var _semiIcons = require("@douyinfe/semi-icons");

var _uuid = require("@douyinfe/semi-foundation/lib/cjs/utils/uuid");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

class TabBar extends _react.default.Component {
  constructor(props) {
    super(props);

    this.handleItemClick = (itemKey, e) => {
      this.props.onTabClick(itemKey, e);

      if (this.props.collapsible) {
        const key = this._getItemKey(itemKey); // eslint-disable-next-line max-len


        const tabItem = document.querySelector("[data-uuid=\"".concat(this.uuid, "\"] .").concat(_constants.cssClasses.TABS_TAB, "[data-scrollkey=\"").concat(key, "\"]"));
        tabItem.scrollIntoView({
          behavior: 'smooth',
          block: 'nearest',
          inline: 'nearest'
        });
      }
    };

    this.handleKeyDown = (event, itemKey, closable) => {
      this.props.handleKeyDown(event, itemKey, closable);
    };

    this.renderTabItem = panel => {
      const {
        size,
        type,
        deleteTabItem
      } = this.props;
      const panelIcon = panel.icon ? this.renderIcon(panel.icon) : null;
      const closableIcon = type === 'card' && panel.closable ? /*#__PURE__*/_react.default.createElement(_semiIcons.IconClose, {
        "aria-label": "Close",
        role: "button",
        className: "".concat(_constants.cssClasses.TABS_TAB, "-icon-close"),
        onClick: e => deleteTabItem(panel.itemKey, e)
      }) : null;
      let events = {};
      const key = panel.itemKey;

      if (!panel.disabled) {
        events = {
          onClick: e => this.handleItemClick(key, e)
        };
      }

      const isSelected = this._isActive(key);

      const className = (0, _classnames.default)(_constants.cssClasses.TABS_TAB, {
        [_constants.cssClasses.TABS_TAB_ACTIVE]: isSelected,
        [_constants.cssClasses.TABS_TAB_DISABLED]: panel.disabled,
        ["".concat(_constants.cssClasses.TABS_TAB, "-small")]: size === 'small',
        ["".concat(_constants.cssClasses.TABS_TAB, "-medium")]: size === 'medium'
      });
      return /*#__PURE__*/_react.default.createElement("div", Object.assign({
        role: "tab",
        id: "semiTab".concat(key),
        "data-tabkey": "semiTab".concat(key),
        "aria-controls": "semiTabPanel".concat(key),
        "aria-disabled": panel.disabled ? 'true' : 'false',
        "aria-selected": isSelected ? 'true' : 'false',
        tabIndex: isSelected ? 0 : -1,
        onKeyDown: e => this.handleKeyDown(e, key, panel.closable)
      }, events, {
        className: className,
        key: this._getItemKey(key)
      }), panelIcon, panel.tab, closableIcon);
    };

    this.renderTabComponents = list => list.map(panel => this.renderTabItem(panel));

    this.handleArrowClick = (items, pos) => {
      const lastItem = pos === 'start' ? items.pop() : items.shift();

      if (!lastItem) {
        return;
      }

      const key = this._getItemKey(lastItem.itemKey); // eslint-disable-next-line max-len


      const tabItem = document.querySelector("[data-uuid=\"".concat(this.uuid, "\"] .").concat(_constants.cssClasses.TABS_TAB, "[data-scrollkey=\"").concat(key, "\"]"));
      tabItem.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline: 'nearest'
      });
    };

    this.renderCollapse = (items, icon, pos) => {
      if ((0, _isEmpty2.default)(items)) {
        return /*#__PURE__*/_react.default.createElement(_button.default, {
          disabled: true,
          icon: icon,
          theme: "borderless"
        });
      }

      const {
        dropdownClassName,
        dropdownStyle
      } = this.props;
      const {
        rePosKey
      } = this.state;
      const disabled = !items.length;

      const menu = /*#__PURE__*/_react.default.createElement(_dropdown.default.Menu, null, items.map(panel => {
        const {
          icon: i,
          tab,
          itemKey
        } = panel;
        const panelIcon = i ? this.renderIcon(panel.icon) : null;
        return /*#__PURE__*/_react.default.createElement(_dropdown.default.Item, {
          key: itemKey,
          onClick: e => this.handleItemClick(itemKey, e),
          active: this._isActive(itemKey)
        }, panelIcon, tab);
      }));

      const arrowCls = (0, _classnames.default)({
        ["".concat(_constants.cssClasses.TABS_BAR, "-arrow-").concat(pos)]: pos,
        ["".concat(_constants.cssClasses.TABS_BAR, "-arrow")]: true
      });
      const dropdownCls = (0, _classnames.default)(dropdownClassName, {
        ["".concat(_constants.cssClasses.TABS_BAR, "-dropdown")]: true
      });
      return /*#__PURE__*/_react.default.createElement(_dropdown.default, {
        className: dropdownCls,
        clickToHide: true,
        clickTriggerToHide: true,
        key: "".concat(rePosKey, "-").concat(pos),
        position: pos === 'start' ? 'bottomLeft' : 'bottomRight',
        render: disabled ? null : menu,
        showTick: true,
        style: dropdownStyle,
        trigger: 'hover'
      }, /*#__PURE__*/_react.default.createElement("div", {
        role: "presentation",
        className: arrowCls,
        onClick: e => this.handleArrowClick(items, pos)
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        disabled: disabled,
        icon: icon,
        // size="small"
        theme: "borderless"
      })));
    };

    this.renderOverflow = items => items.map((item, ind) => {
      const icon = ind === 0 ? /*#__PURE__*/_react.default.createElement(_semiIcons.IconChevronLeft, null) : /*#__PURE__*/_react.default.createElement(_semiIcons.IconChevronRight, null);
      const pos = ind === 0 ? 'start' : 'end';
      return this.renderCollapse(item, icon, pos);
    });

    this.renderCollapsedTab = () => {
      const {
        list
      } = this.props;
      const renderedList = list.map(item => {
        const {
          itemKey
        } = item;
        return Object.assign({
          key: this._getItemKey(itemKey),
          active: this._isActive(itemKey)
        }, item);
      });
      return /*#__PURE__*/_react.default.createElement(_overflowList.default, {
        items: renderedList,
        overflowRenderer: this.renderOverflow,
        renderMode: "scroll",
        className: "".concat(_constants.cssClasses.TABS_BAR, "-overflow-list"),
        visibleItemRenderer: this.renderTabItem
      });
    };

    this._isActive = key => key === this.props.activeKey;

    this._getItemKey = key => "".concat(key, "-bar");

    this.state = {
      endInd: props.list.length,
      rePosKey: 0,
      startInd: 0
    };
    this.uuid = (0, _uuid.getUuidv4)();
  }

  renderIcon(icon) {
    return /*#__PURE__*/_react.default.createElement("span", null, icon);
  }

  renderExtra() {
    const {
      tabBarExtraContent,
      type,
      size
    } = this.props;
    const tabBarExtraContentDefaultStyle = {
      float: 'right'
    };
    const tabBarExtraContentStyle = tabBarExtraContent && tabBarExtraContent.props ? tabBarExtraContent.props.style : {};
    const extraCls = (0, _classnames.default)(_constants.cssClasses.TABS_BAR_EXTRA, {
      ["".concat(_constants.cssClasses.TABS_BAR, "-").concat(type, "-extra")]: type,
      ["".concat(_constants.cssClasses.TABS_BAR, "-").concat(type, "-extra-").concat(size)]: size
    });

    if (tabBarExtraContent) {
      const tabBarStyle = Object.assign(Object.assign({}, tabBarExtraContentDefaultStyle), tabBarExtraContentStyle);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: extraCls,
        style: tabBarStyle,
        "x-semi-prop": "tabBarExtraContent"
      }, tabBarExtraContent);
    }

    return null;
  }

  render() {
    const _a = this.props,
          {
      type,
      style,
      className,
      list,
      tabPosition,
      collapsible
    } = _a,
          restProps = __rest(_a, ["type", "style", "className", "list", "tabPosition", "collapsible"]);

    const classNames = (0, _classnames.default)(className, {
      [_constants.cssClasses.TABS_BAR]: true,
      [_constants.cssClasses.TABS_BAR_LINE]: type === 'line',
      [_constants.cssClasses.TABS_BAR_CARD]: type === 'card',
      [_constants.cssClasses.TABS_BAR_BUTTON]: type === 'button',
      ["".concat(_constants.cssClasses.TABS_BAR, "-").concat(tabPosition)]: tabPosition,
      ["".concat(_constants.cssClasses.TABS_BAR, "-collapse")]: collapsible
    });
    const extra = this.renderExtra();
    const contents = collapsible ? this.renderCollapsedTab() : this.renderTabComponents(list);
    return /*#__PURE__*/_react.default.createElement("div", Object.assign({
      role: "tablist",
      "aria-orientation": tabPosition === "left" ? "vertical" : "horizontal",
      className: classNames,
      style: style
    }, (0, _getDataAttr.default)(restProps), {
      "data-uuid": this.uuid
    }), contents, extra);
  }

}

TabBar.propTypes = {
  activeKey: _propTypes.default.string,
  className: _propTypes.default.string,
  collapsible: _propTypes.default.bool,
  list: _propTypes.default.array,
  onTabClick: _propTypes.default.func,
  size: _propTypes.default.oneOf(_constants.strings.SIZE),
  style: _propTypes.default.object,
  tabBarExtraContent: _propTypes.default.node,
  tabPosition: _propTypes.default.oneOf(_constants.strings.POSITION_MAP),
  type: _propTypes.default.oneOf(_constants.strings.TYPE_MAP),
  closable: _propTypes.default.bool,
  deleteTabItem: _propTypes.default.func
};
var _default = TabBar;
exports.default = _default;