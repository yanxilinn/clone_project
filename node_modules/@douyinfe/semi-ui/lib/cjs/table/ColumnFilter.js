"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ColumnFilter;

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _semiIcons = require("@douyinfe/semi-icons");

var _constants = require("@douyinfe/semi-foundation/lib/cjs/table/constants");

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _radio = require("../radio");

var _checkbox = require("../checkbox");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-nested-ternary */

/* eslint-disable eqeqeq */
function renderDropdown() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let nestedElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  const {
    filterMultiple = true,
    filters = [],
    filteredValue = [],
    filterDropdownVisible,
    onSelect = _noop2.default,
    onFilterDropdownVisibleChange = _noop2.default,
    trigger = 'click',
    position = 'bottom',
    renderFilterDropdownItem
  } = props;
  const dropdownProps = Object.assign(Object.assign({}, props), {
    onVisibleChange: visible => onFilterDropdownVisibleChange(visible),
    trigger,
    position,
    render: /*#__PURE__*/_react.default.createElement(_dropdown.default.Menu, null, Array.isArray(filters) && filters.map((filter, index) => {
      const changeFn = e => {
        const domEvent = e && e.nativeEvent;

        if (domEvent) {
          // Block this event to prevent the pop-up layer from closing
          domEvent.stopImmediatePropagation(); // Prevent bubbling and default events to prevent label click events from triggering twice

          domEvent.stopPropagation();
          domEvent.preventDefault();
        }

        let values = [...filteredValue];
        const included = values.includes(filter.value);
        const idx = values.indexOf(filter.value);

        if (idx > -1) {
          values.splice(idx, 1);
        } else if (filterMultiple) {
          values.push(filter.value);
        } else {
          values = [filter.value];
        }

        return onSelect({
          value: filter.value,
          filteredValue: values,
          included: !included,
          domEvent
        });
      };

      const checked = filteredValue.includes(filter.value);
      const {
        text
      } = filter;
      const {
        value
      } = filter;
      const key = "".concat(level, "_").concat(index);
      const dropdownItem = typeof renderFilterDropdownItem === 'function' ? renderFilterDropdownItem({
        onChange: changeFn,
        filterMultiple,
        value,
        text,
        checked,
        filteredValue,
        level
      }) : null;
      let item = dropdownItem && /*#__PURE__*/_react.default.isValidElement(dropdownItem) ? /*#__PURE__*/_react.default.cloneElement(dropdownItem, {
        key
      }) : /*#__PURE__*/_react.default.createElement(_dropdown.default.Item, {
        key: key,
        onClick: changeFn
      }, filterMultiple ? /*#__PURE__*/_react.default.createElement(_checkbox.Checkbox, {
        checked: checked
      }, text) : /*#__PURE__*/_react.default.createElement(_radio.Radio, {
        checked: checked
      }, text));

      if (Array.isArray(filter.children) && filter.children.length) {
        const childrenDropdownProps = Object.assign(Object.assign({}, props), {
          filters: filter.children,
          trigger: 'hover',
          position: 'right'
        });
        delete childrenDropdownProps.filterDropdownVisible;
        item = renderDropdown(childrenDropdownProps, item, level + 1);
      }

      return item;
    }))
  });

  if (filterDropdownVisible != null) {
    dropdownProps.visible = filterDropdownVisible;
  }

  return /*#__PURE__*/_react.default.createElement(_dropdown.default, Object.assign({}, dropdownProps, {
    key: "Dropdown_level_".concat(level)
  }), nestedElem);
}

function ColumnFilter() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    prefixCls = _constants.cssClasses.PREFIX,
    filteredValue,
    filterIcon = 'filter',
    renderFilterDropdown,
    filterDropdownProps
  } = props;
  let {
    filterDropdown = null
  } = props;
  const finalCls = (0, _classnames.default)("".concat(prefixCls, "-column-filter"), {
    on: Array.isArray(filteredValue) && filteredValue.length
  });
  let iconElem;

  if (typeof filterIcon === 'function') {
    iconElem = filterIcon(Array.isArray(filteredValue) && filteredValue.length > 0);
  } else if ( /*#__PURE__*/(0, _react.isValidElement)(filterIcon)) {
    iconElem = filterIcon;
  } else {
    iconElem = /*#__PURE__*/_react.default.createElement("div", {
      className: finalCls
    }, '\u200b'
    /* ZWSP(zero-width space) */
    , /*#__PURE__*/_react.default.createElement(_semiIcons.IconFilter, {
      role: "button",
      "aria-label": "Filter data with this column",
      "aria-haspopup": "listbox",
      tabIndex: -1,
      size: "default"
    }));
  }

  const renderProps = Object.assign(Object.assign({}, props), filterDropdownProps);
  filterDropdown = /*#__PURE__*/_react.default.isValidElement(filterDropdown) ? filterDropdown : typeof renderFilterDropdown === 'function' ? renderFilterDropdown(renderProps, {
    iconElem
  }) : renderDropdown(renderProps, iconElem);
  return filterDropdown;
}