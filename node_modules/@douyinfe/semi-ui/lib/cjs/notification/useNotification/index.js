"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNotification;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/notification/constants");

var _HookNotice = _interopRequireDefault(require("./HookNotice"));

require("@douyinfe/semi-foundation/lib/cjs/notification/notification.css");

var _uuid = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/uuid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// TODO: Automatic folding + unfolding function when there are more than N
const defaultConfig = {
  duration: 3,
  position: 'topRight',
  motion: true,
  content: '',
  title: '',
  zIndex: 1010
};

function usePatchElement() {
  const [elements, setElements] = (0, _react.useState)([]);

  function patchElement(element, config) {
    setElements(originElements => [{
      element,
      config
    }, ...originElements]);
    return id => {
      setElements(originElements => originElements.filter(_ref => {
        let {
          config: configOfCurrentElement
        } = _ref;
        return configOfCurrentElement.id !== id;
      }));
    };
  }

  function renderList() {
    const noticesInPosition = {
      top: [],
      topLeft: [],
      topRight: [],
      bottom: [],
      bottomLeft: [],
      bottomRight: []
    };
    elements.forEach(_ref2 => {
      let {
        element,
        config
      } = _ref2;
      const {
        position
      } = config;
      noticesInPosition[position].push(element);
    });
    return Object.entries(noticesInPosition).map(obj => {
      const pos = obj[0];
      const notices = obj[1]; // @ts-ignore

      return Array.isArray(notices) && notices.length ? /*#__PURE__*/_react.default.createElement("div", {
        key: pos,
        className: (0, _classnames.default)(_constants.cssClasses.LIST),
        placement: pos
      }, notices) : null;
    });
  }

  return [renderList(), patchElement];
}

function useNotification() {
  const [elements, patchElement] = usePatchElement();
  const noticeRef = new Map();

  const addNotice = config => {
    const id = (0, _uuid.default)('semi_notice_');
    const mergeConfig = Object.assign(Object.assign({}, config), {
      id
    }); // eslint-disable-next-line prefer-const

    let closeFunc;

    const ref = ele => {
      noticeRef.set(id, ele);
    };

    const notice = /*#__PURE__*/_react.default.createElement(_HookNotice.default, Object.assign({
      key: id
    }, mergeConfig, {
      afterClose: instanceID => closeFunc(instanceID),
      ref: ref
    }));

    closeFunc = patchElement(notice, Object.assign({}, mergeConfig));
    return id;
  };

  const removeElement = instanceID => {
    const ele = noticeRef.get(instanceID);
    ele && ele.close();
  };

  return [{
    success: config => addNotice(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), {
      type: 'success'
    })),
    info: config => addNotice(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), {
      type: 'info'
    })),
    error: config => addNotice(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), {
      type: 'error'
    })),
    warning: config => addNotice(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), {
      type: 'warning'
    })),
    open: config => addNotice(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), {
      type: 'default'
    })),
    close: removeElement
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, elements)];
}