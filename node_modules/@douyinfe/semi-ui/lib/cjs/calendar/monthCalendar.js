"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _semiIcons = require("@douyinfe/semi-icons");

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/calendar/foundation"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/calendar/constants");

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

var _context = _interopRequireDefault(require("../locale/context"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _popover = _interopRequireDefault(require("../popover"));

var _iconButton = _interopRequireDefault(require("../iconButton"));

require("@douyinfe/semi-foundation/lib/cjs/calendar/calendar.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */
// eslint-disable-next-line max-len
const toPercent = num => {
  const res = num < 1 ? num * 100 : 100;
  return "".concat(res, "%");
};

const prefixCls = "".concat(_constants.cssClasses.PREFIX, "-month");
const contentPadding = 60;
const contentHeight = 24;

class monthCalendar extends _baseComponent.default {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    this.calcItemLimit = () => {
      this.contentCellHeight = this.cellDom.current.getBoundingClientRect().height;
      return Math.max(0, Math.ceil((this.contentCellHeight - contentPadding) / contentHeight));
    };

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.showCard = (e, key) => {
      this.foundation.showCard(e, key);
    };

    this.renderHeader = dateFnsLocale => {
      const {
        markWeekend,
        displayValue
      } = this.props;
      this.monthlyData = this.foundation.getMonthlyData(displayValue, dateFnsLocale);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "-header"),
        role: "presentation"
      }, /*#__PURE__*/_react.default.createElement("div", {
        role: "presentation",
        className: "".concat(prefixCls, "-grid")
      }, /*#__PURE__*/_react.default.createElement("ul", {
        role: "row",
        className: "".concat(prefixCls, "-grid-row")
      }, this.monthlyData[0].map(day => {
        const {
          weekday
        } = day;
        const listCls = (0, _classnames.default)({
          ["".concat(_constants.cssClasses.PREFIX, "-weekend")]: markWeekend && day.isWeekend
        });
        return /*#__PURE__*/_react.default.createElement("li", {
          role: "columnheader",
          "aria-label": weekday,
          key: "".concat(weekday, "-monthheader"),
          className: listCls
        }, /*#__PURE__*/_react.default.createElement("span", null, weekday));
      }))));
    };

    this.renderEvents = events => {
      if (!events) {
        return undefined;
      }

      const list = events.map((event, ind) => {
        const {
          leftPos,
          width,
          topInd,
          key,
          children
        } = event;
        const style = {
          left: toPercent(leftPos),
          width: toPercent(width),
          top: "".concat(topInd, "em")
        };
        return /*#__PURE__*/_react.default.createElement("li", {
          className: "".concat(_constants.cssClasses.PREFIX, "-event-item ").concat(_constants.cssClasses.PREFIX, "-event-month"),
          key: key || "".concat(ind, "-monthevent"),
          style: style
        }, children);
      });
      return list;
    };

    this.renderCollapsed = (events, itemInfo, listCls, month) => {
      const {
        itemLimit,
        showCard
      } = this.state;
      const {
        weekday,
        dayString,
        date
      } = itemInfo;
      const key = date.toString();
      const remained = events.filter(i => Boolean(i)).length - itemLimit;
      const cardCls = "".concat(prefixCls, "-event-card"); // const top = contentPadding / 2 + this.state.itemLimit * contentHeight;

      const shouldRenderCard = remained > 0;

      const closer = /*#__PURE__*/_react.default.createElement(_iconButton.default, {
        className: "".concat(cardCls, "-close"),
        onClick: e => this.closeCard(e, key),
        type: "tertiary",
        icon: /*#__PURE__*/_react.default.createElement(_semiIcons.IconClose, null),
        theme: "borderless",
        size: "small"
      });

      const header = /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(cardCls, "-header-info")
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(cardCls, "-header-info-weekday")
      }, weekday), /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(cardCls, "-header-info-date")
      }, dayString));

      const content = /*#__PURE__*/_react.default.createElement("div", {
        className: cardCls
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(cardCls, "-content")
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(cardCls, "-header")
      }, header, closer), /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(cardCls, "-body")
      }, /*#__PURE__*/_react.default.createElement("ul", {
        className: "".concat(cardCls, "-list")
      }, events.map(item => /*#__PURE__*/_react.default.createElement("li", {
        key: item.key || "".concat(item.start.toString(), "-event")
      }, item.children))))));

      const pos = showCard && showCard[key] ? showCard[key][1] : 'leftTopOver';

      const text = /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
        componentName: "Calendar"
      }, locale =>
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      _react.default.createElement("div", {
        className: "".concat(cardCls, "-wrapper"),
        style: {
          bottom: 0
        },
        onClick: e => this.showCard(e, key)
      }, locale.remaining.replace('${remained}', String(remained))));

      return /*#__PURE__*/_react.default.createElement(_popover.default, {
        key: "".concat(date.valueOf()),
        content: content,
        position: pos,
        trigger: "custom",
        visible: showCard && showCard[key] && showCard[key][0],
        ref: ref => this.cardRef.set(key, ref)
      }, /*#__PURE__*/_react.default.createElement("li", {
        key: date,
        className: listCls,
        onClick: e => this.handleClick(e, [date])
      }, this.formatDayString(month, dayString), shouldRenderCard ? text : null, this.renderCusDateGrid(date)));
    };

    this.formatDayString = (month, date) => {
      if (date === '1') {
        return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
          componentName: "Calendar"
        }, (locale, localeCode) => /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(prefixCls, "-date")
        }, month, /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(_constants.cssClasses.PREFIX, "-today-date")
        }, "\u00A0", date), locale.datestring));
      }

      return (
        /*#__PURE__*/
        // eslint-disable-next-line max-len
        _react.default.createElement("span", {
          className: "".concat(prefixCls, "-date")
        }, /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(_constants.cssClasses.PREFIX, "-today-date")
        }, date))
      );
    };

    this.renderCusDateGrid = date => {
      const {
        dateGridRender
      } = this.props;

      if (!dateGridRender) {
        return null;
      }

      return dateGridRender(date.toString(), date);
    };

    this.renderWeekRow = function (index, weekDay) {
      let events = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const {
        markWeekend
      } = _this.props;
      const {
        itemLimit
      } = _this.state;
      const {
        display,
        day
      } = events;
      return /*#__PURE__*/_react.default.createElement("div", {
        role: "presentation",
        className: "".concat(prefixCls, "-weekrow"),
        ref: _this.cellDom,
        key: "".concat(index, "-weekrow")
      }, /*#__PURE__*/_react.default.createElement("ul", {
        role: "row",
        className: "".concat(prefixCls, "-skeleton")
      }, weekDay.map(each => {
        const {
          date,
          dayString,
          isToday,
          isSameMonth,
          isWeekend,
          month,
          ind
        } = each;
        const listCls = (0, _classnames.default)({
          ["".concat(_constants.cssClasses.PREFIX, "-today")]: isToday,
          ["".concat(_constants.cssClasses.PREFIX, "-weekend")]: markWeekend && isWeekend,
          ["".concat(prefixCls, "-same")]: isSameMonth
        });
        const shouldRenderCollapsed = Boolean(day && day[ind] && day[ind].length > itemLimit);

        const inner = /*#__PURE__*/_react.default.createElement("li", {
          role: "gridcell",
          "aria-label": date.toLocaleDateString(),
          "aria-current": isToday ? "date" : false,
          key: "".concat(date, "-weeksk"),
          className: listCls,
          onClick: e => _this.handleClick(e, [date])
        }, _this.formatDayString(month, dayString), _this.renderCusDateGrid(date));

        if (!shouldRenderCollapsed) {
          return inner;
        }

        return _this.renderCollapsed(day[ind], each, listCls, month);
      })), /*#__PURE__*/_react.default.createElement("ul", {
        className: "".concat(_constants.cssClasses.PREFIX, "-event-items")
      }, display ? _this.renderEvents(display) : null));
    };

    this.renderMonthGrid = () => {
      const {
        parsedEvents
      } = this.state;
      return /*#__PURE__*/_react.default.createElement("div", {
        role: "presentation",
        className: "".concat(prefixCls, "-week")
      }, /*#__PURE__*/_react.default.createElement("ul", {
        role: "presentation",
        className: "".concat(prefixCls, "-grid-col")
      }, Object.keys(this.monthlyData).map(weekInd => this.renderWeekRow(weekInd, this.monthlyData[weekInd], parsedEvents[weekInd]))));
    };

    this.state = {
      itemLimit: 0,
      showCard: {},
      parsedEvents: {},
      cachedKeys: []
    };
    this.cellDom = /*#__PURE__*/_react.default.createRef();
    this.foundation = new _foundation.default(this.adapter);
    this.handleClick = this.handleClick.bind(this);
    this.cardRef = new Map();
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      registerClickOutsideHandler: (key, cb) => {
        const clickOutsideHandler = e => {
          const cardInstance = this.cardRef && this.cardRef.get(key); // eslint-disable-next-line react/no-find-dom-node

          const cardDom = _reactDom.default.findDOMNode(cardInstance);

          if (cardDom && !cardDom.contains(e.target)) {
            cb();
          }
        };

        this.clickOutsideHandler = clickOutsideHandler;
        document.addEventListener('mousedown', clickOutsideHandler, false);
      },
      unregisterClickOutsideHandler: () => {
        document.removeEventListener('mousedown', this.clickOutsideHandler, false);
      },
      setMonthlyData: data => {
        this.monthlyData = data;
      },
      getMonthlyData: () => this.monthlyData,
      notifyClose: (e, key) => {
        const updates = {};
        updates[key] = [false];
        this.setState(prevState => ({
          showCard: Object.assign(Object.assign({}, prevState.showCard), updates)
        }));
        this.props.onClose && this.props.onClose(e);
      },
      openCard: (key, spacing) => {
        const updates = {};
        const pos = spacing ? 'leftTopOver' : 'rightTopOver';
        updates[key] = [true, pos];
        this.setState(prevState => ({
          showCard: Object.assign({}, updates)
        }));
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      setItemLimit: itemLimit => {
        this.setState({
          itemLimit
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const itemLimit = this.calcItemLimit();
    this.foundation.parseMonthlyEvents(itemLimit);
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  componentDidUpdate(prevProps, prevState) {
    const prevEventKeys = prevState.cachedKeys;
    const nowEventKeys = this.props.events.map(event => event.key);
    let itemLimitUpdate = false;
    let {
      itemLimit
    } = this.state;

    if (prevProps.height !== this.props.height) {
      itemLimit = this.calcItemLimit();

      if (prevState.itemLimit !== itemLimit) {
        itemLimitUpdate = true;
      }
    }

    if (!(0, _isEqual2.default)(prevEventKeys, nowEventKeys) || itemLimitUpdate) {
      this.foundation.parseMonthlyEvents(itemLimit || this.props.events);
    }
  }

  closeCard(e, key) {
    this.foundation.closeCard(e, key);
  }

  render() {
    const {
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const monthCls = (0, _classnames.default)(prefixCls, className);
    const monthStyle = Object.assign({
      height,
      width
    }, style);
    return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
      componentName: "Calendar"
    }, (locale, localeCode, dateFnsLocale) => /*#__PURE__*/_react.default.createElement("div", {
      role: "grid",
      className: monthCls,
      key: this.state.itemLimit,
      style: monthStyle
    }, /*#__PURE__*/_react.default.createElement("div", {
      role: "presentation",
      className: "".concat(prefixCls, "-sticky-top")
    }, header, this.renderHeader(dateFnsLocale)), /*#__PURE__*/_react.default.createElement("div", {
      role: "presentation",
      className: "".concat(prefixCls, "-grid-wrapper")
    }, this.renderMonthGrid())));
  }

}

exports.default = monthCalendar;
monthCalendar.propTypes = {
  displayValue: _propTypes.default.instanceOf(Date),
  header: _propTypes.default.node,
  events: _propTypes.default.array,
  mode: _propTypes.default.string,
  markWeekend: _propTypes.default.bool,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  dateGridRender: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onClose: _propTypes.default.func
};
monthCalendar.defaultProps = {
  displayValue: new Date(),
  events: [],
  mode: 'month'
};
monthCalendar.contextType = _context.default;