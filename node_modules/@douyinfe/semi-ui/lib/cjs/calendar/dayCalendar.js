"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/calendar/foundation"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/calendar/constants");

var _dayCol = _interopRequireDefault(require("./dayCol"));

var _timeCol = _interopRequireDefault(require("./timeCol"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

var _context = _interopRequireDefault(require("../locale/context"));

require("@douyinfe/semi-foundation/lib/cjs/calendar/calendar.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const prefixCls = "".concat(_constants.cssClasses.PREFIX, "-day");

class DayCalendar extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.checkWeekend = val => this.foundation.checkWeekend(val);

    this.renderAllDayEvents = events => {
      const list = events.map((event, ind) => {
        const {
          children,
          key
        } = event;
        return (
          /*#__PURE__*/
          // eslint-disable-next-line max-len
          _react.default.createElement("li", {
            className: "".concat(_constants.cssClasses.PREFIX, "-event-item ").concat(_constants.cssClasses.PREFIX, "-event-allday"),
            key: key || "allDay-".concat(ind)
          }, children)
        );
      });
      return list;
    };

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.renderAllDay = events => {
      const allDayCls = "".concat(_constants.cssClasses.PREFIX, "-all-day");
      const contentCls = (0, _classnames.default)("".concat(allDayCls, "-content"), {
        ["".concat(_constants.cssClasses.PREFIX, "-weekend")]: this.isWeekend
      });
      return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
        componentName: "Calendar"
      }, locale => /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(allDayCls)
      }, /*#__PURE__*/_react.default.createElement("ul", {
        className: "".concat(_constants.cssClasses.PREFIX, "-tag ").concat(allDayCls, "-tag ").concat(prefixCls, "-sticky-left")
      }, /*#__PURE__*/_react.default.createElement("span", null, locale.allDay)), /*#__PURE__*/_react.default.createElement("div", {
        role: "gridcell",
        className: contentCls
      }, /*#__PURE__*/_react.default.createElement("ul", {
        className: "".concat(_constants.cssClasses.PREFIX, "-event-items")
      }, this.renderAllDayEvents(events)))));
    };

    this.foundation = new _foundation.default(this.adapter);
    this.state = {
      scrollHeight: 0,
      parsedEvents: {
        day: [],
        allDay: []
      },
      cachedKeys: []
    };
    this.dom = /*#__PURE__*/_react.default.createRef();
    this.scrollDom = /*#__PURE__*/_react.default.createRef();
    this.isWeekend = false;
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      updateScrollHeight: scrollHeight => {
        this.setState({
          scrollHeight
        });
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const {
      scrollHeight
    } = this.scrollDom.current;
    this.dom.current.scrollTop = this.props.scrollTop;
    this.foundation.notifyScrollHeight(scrollHeight);
    this.foundation.parseDailyEvents();
  }

  componentDidUpdate(prevProps, prevState) {
    const prevEventKeys = prevState.cachedKeys;
    const nowEventKeys = this.props.events.map(event => event.key);

    if (!(0, _isEqual2.default)(prevEventKeys, nowEventKeys)) {
      this.foundation.parseDailyEvents();
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    // eslint-disable-next-line max-len
    const {
      dateGridRender,
      displayValue,
      showCurrTime,
      renderTimeDisplay,
      markWeekend,
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const dayCls = (0, _classnames.default)(prefixCls, className);
    const dayStyle = Object.assign({
      height,
      width
    }, style);
    const {
      parsedEvents,
      scrollHeight
    } = this.state;
    this.isWeekend = markWeekend && this.checkWeekend(displayValue);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: dayCls,
      style: dayStyle,
      ref: this.dom
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-sticky-top")
    }, header, this.renderAllDay(parsedEvents.allDay)), /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-scroll-wrapper")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-scroll"),
      ref: this.scrollDom
    }, /*#__PURE__*/_react.default.createElement(_timeCol.default, {
      className: "".concat(prefixCls, "-sticky-left"),
      renderTimeDisplay: renderTimeDisplay
    }), /*#__PURE__*/_react.default.createElement(_dayCol.default, {
      events: parsedEvents.day,
      displayValue: displayValue,
      scrollHeight: scrollHeight,
      handleClick: this.handleClick,
      showCurrTime: showCurrTime,
      isWeekend: this.isWeekend,
      dateGridRender: dateGridRender
    }))));
  }

}

exports.default = DayCalendar;
DayCalendar.propTypes = {
  displayValue: _propTypes.default.instanceOf(Date),
  events: _propTypes.default.array,
  header: _propTypes.default.node,
  showCurrTime: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  mode: _propTypes.default.string,
  renderTimeDisplay: _propTypes.default.func,
  markWeekend: _propTypes.default.bool,
  scrollTop: _propTypes.default.number,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  dateGridRender: _propTypes.default.func
};
DayCalendar.defaultProps = {
  events: [],
  displayValue: new Date(),
  mode: 'day'
};
DayCalendar.contextType = _context.default;