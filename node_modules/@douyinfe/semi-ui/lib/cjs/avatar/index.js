"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/avatar/constants");

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/avatar/foundation"));

require("@douyinfe/semi-foundation/lib/cjs/avatar/avatar.css");

var _function = require("@douyinfe/semi-foundation/lib/cjs/utils/function");

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _a11y = require("@douyinfe/semi-foundation/lib/cjs/utils/a11y");

var _interface = require("./interface");

Object.keys(_interface).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _interface[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _interface[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

const sizeSet = _constants.strings.SIZE;
const shapeSet = _constants.strings.SHAPE;
const colorSet = _constants.strings.COLOR;
const prefixCls = _constants.cssClasses.PREFIX;

class Avatar extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.handleFocusVisible = event => {
      this.foundation.handleFocusVisible(event);
    };

    this.handleBlur = event => {
      this.foundation.handleBlur();
    };

    this.getContent = () => {
      const {
        children,
        onClick,
        imgAttr,
        src,
        srcSet,
        alt
      } = this.props;
      const {
        isImgExist
      } = this.state;
      let content = children;
      const clickable = onClick !== _function.noop;
      const isImg = src && isImgExist;
      const a11yFocusProps = {
        tabIndex: 0,
        onKeyDown: this.handleKeyDown,
        onFocus: this.handleFocusVisible,
        onBlur: this.handleBlur
      };

      if (isImg) {
        const finalAlt = clickable ? "clickable Avatar: ".concat(alt) : alt;
        const imgBasicProps = Object.assign(Object.assign({
          src,
          srcSet,
          onError: this.handleError
        }, imgAttr), {
          className: (0, _classnames.default)({
            ["".concat(prefixCls, "-no-focus-visible")]: clickable
          })
        });
        const imgProps = clickable ? Object.assign(Object.assign({}, imgBasicProps), a11yFocusProps) : imgBasicProps;
        content = /*#__PURE__*/_react.default.createElement("img", Object.assign({
          alt: finalAlt
        }, imgProps));
      } else if (typeof children === 'string') {
        const tempAlt = alt !== null && alt !== void 0 ? alt : children;
        const finalAlt = clickable ? "clickable Avatar: ".concat(tempAlt) : tempAlt;
        const props = {
          role: 'img',
          'aria-label': finalAlt,
          className: (0, _classnames.default)("".concat(prefixCls, "-label"), {
            ["".concat(prefixCls, "-no-focus-visible")]: clickable
          })
        };
        const finalProps = clickable ? Object.assign(Object.assign({}, props), a11yFocusProps) : props;
        content = /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(prefixCls, "-content")
        }, /*#__PURE__*/_react.default.createElement("span", Object.assign({}, finalProps, {
          "x-semi-prop": "children"
        }), children));
      }

      return content;
    };

    this.state = {
      isImgExist: true,
      hoverContent: '',
      focusVisible: false
    };
    this.onEnter = this.onEnter.bind(this);
    this.onLeave = this.onLeave.bind(this);
    this.handleError = this.handleError.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.getContent = this.getContent.bind(this);
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      notifyImgState: isImgExist => {
        this.setState({
          isImgExist
        });
      },
      notifyEnter: e => {
        const {
          hoverMask
        } = this.props;
        const hoverContent = hoverMask;
        this.setState({
          hoverContent
        }, () => {
          const {
            onMouseEnter
          } = this.props;
          onMouseEnter && onMouseEnter(e);
        });
      },
      notifyLeave: e => {
        this.setState({
          hoverContent: ''
        }, () => {
          const {
            onMouseLeave
          } = this.props;
          onMouseLeave && onMouseLeave(e);
        });
      },
      setFocusVisible: focusVisible => {
        this.setState({
          focusVisible
        });
      }
    });
  }

  componentDidMount() {
    this.foundation = new _foundation.default(this.adapter);
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (this.props.src && this.props.src !== prevProps.src) {
      const image = new Image(0, 0);
      image.src = this.props.src;

      image.onload = () => {
        this.setState({
          isImgExist: true
        });
      };

      image.onerror = () => {
        this.setState({
          isImgExist: false
        });
      };

      image.onabort = () => {
        this.setState({
          isImgExist: false
        });
      };
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  onEnter(e) {
    this.foundation.handleEnter(e);
  }

  onLeave(e) {
    this.foundation.handleLeave(e);
  }

  handleError() {
    this.foundation.handleImgLoadError();
  }

  handleKeyDown(event) {
    const {
      onClick
    } = this.props;

    switch (event.key) {
      case "Enter":
        onClick(event);
        (0, _a11y.handlePrevent)(event);
        break;

      case 'Escape':
        event.target.blur();
        break;

      default:
        break;
    }
  }

  render() {
    // eslint-disable-next-line max-len, no-unused-vars
    const _a = this.props,
          {
      shape,
      children,
      size,
      color,
      className,
      hoverMask,
      onClick,
      imgAttr,
      src,
      srcSet,
      style,
      alt
    } = _a,
          others = __rest(_a, ["shape", "children", "size", "color", "className", "hoverMask", "onClick", "imgAttr", "src", "srcSet", "style", "alt"]);

    const {
      isImgExist,
      hoverContent,
      focusVisible
    } = this.state;
    const isImg = src && isImgExist;
    const avatarCls = (0, _classnames.default)(prefixCls, {
      ["".concat(prefixCls, "-").concat(shape)]: shape,
      ["".concat(prefixCls, "-").concat(size)]: size,
      ["".concat(prefixCls, "-").concat(color)]: color && !isImg,
      ["".concat(prefixCls, "-img")]: isImg,
      ["".concat(prefixCls, "-focus")]: focusVisible
    }, className);
    const hoverRender = hoverContent ? /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-hover"),
      "x-semi-prop": "hoverContent"
    }, hoverContent) : null;
    return /*#__PURE__*/_react.default.createElement("span", Object.assign({}, others, {
      style: style,
      className: avatarCls,
      onClick: onClick,
      onMouseEnter: this.onEnter,
      onMouseLeave: this.onLeave,
      role: 'listitem'
    }), this.getContent(), hoverRender);
  }

}

exports.default = Avatar;
Avatar.defaultProps = {
  size: 'medium',
  color: 'grey',
  shape: 'circle',
  onClick: _function.noop,
  onMouseEnter: _function.noop,
  onMouseLeave: _function.noop
};
Avatar.propTypes = {
  children: _propTypes.default.node,
  color: _propTypes.default.oneOf(colorSet),
  shape: _propTypes.default.oneOf(shapeSet),
  size: _propTypes.default.oneOf(sizeSet),
  hoverMask: _propTypes.default.node,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  imgAttr: _propTypes.default.object,
  src: _propTypes.default.string,
  srcSet: _propTypes.default.string,
  alt: _propTypes.default.string,
  onError: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onMouseEnter: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func
};
Avatar.elementType = 'Avatar';