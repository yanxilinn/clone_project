"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = _interopRequireDefault(require("./index"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/avatar/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

const sizeSet = _constants.strings.SIZE;
const shapeSet = _constants.strings.SHAPE;
const overlapFromSet = _constants.strings.OVERLAP_FROM;
const prefixCls = _constants.cssClasses.PREFIX;

class AvatarGroup extends _react.PureComponent {
  getAllAvatars() {
    const {
      children
    } = this.props;

    if (children) {
      return Array.isArray(children) ? _react.default.Children.toArray(children) : [children];
    }

    return [];
  }

  getMergeAvatars(avatars) {
    const {
      maxCount
    } = this.props;
    let renderAvatars = avatars;
    const restNumber = avatars.length - maxCount;
    const normalAvatars = avatars.slice(0, maxCount);
    const restAvatars = avatars.slice(maxCount);

    if (restNumber > 0) {
      const more = this.renderMoreAvatar(restNumber, restAvatars);
      normalAvatars.push(more);
      renderAvatars = normalAvatars;
    }

    return renderAvatars;
  }

  renderMoreAvatar(restNumber, restAvatars) {
    const {
      renderMore
    } = this.props;
    const moreCls = (0, _classnames.default)("".concat(prefixCls, "-item-more"));
    const restAvatarAlt = restAvatars === null || restAvatars === void 0 ? void 0 : restAvatars.reduce((pre, cur) => {
      const {
        children,
        alt
      } = cur.props;
      const avatarInfo = alt !== null && alt !== void 0 ? alt : typeof children === 'string' ? children : '';

      if (avatarInfo.length === 0) {
        return pre;
      }

      return pre.length > 0 ? "".concat(pre, ",").concat(avatarInfo) : avatarInfo;
    }, '');
    const finalAlt = " Number of remaining Avatars\uFF1A".concat(restNumber, ",").concat(restAvatarAlt);

    let moreAvatar = /*#__PURE__*/_react.default.createElement(_index.default, {
      className: moreCls,
      key: "_+n",
      alt: finalAlt
    }, "+".concat(restNumber));

    if ((0, _isFunction2.default)(renderMore)) {
      moreAvatar = /*#__PURE__*/_react.default.createElement(_react.Fragment, {
        key: "_+n"
      }, renderMore(restNumber, restAvatars));
    }

    return moreAvatar;
  }

  render() {
    // eslint-disable-next-line no-unused-vars
    const _a = this.props,
          {
      children,
      maxCount,
      overlapFrom,
      size,
      shape,
      renderMore
    } = _a,
          rest = __rest(_a, ["children", "maxCount", "overlapFrom", "size", "shape", "renderMore"]);

    let inner;
    const groupCls = (0, _classnames.default)({
      ["".concat(prefixCls, "-group")]: true
    });

    if (children) {
      const avatars = this.getAllAvatars();
      inner = ((0, _isNumber2.default)(maxCount) ? this.getMergeAvatars(avatars) : avatars).map((itm, index) => {
        const className = (0, _classnames.default)((0, _get2.default)(itm.props, 'className'), {
          ["".concat(prefixCls, "-item-start-").concat(index)]: overlapFrom === 'start',
          ["".concat(prefixCls, "-item-end-").concat(index)]: overlapFrom === 'end'
        });
        return /*#__PURE__*/_react.default.cloneElement(itm, Object.assign(Object.assign({}, rest), {
          className,
          size,
          shape,
          key: index
        }));
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: groupCls,
      role: 'list'
    }, inner);
  }

}

exports.default = AvatarGroup;
AvatarGroup.defaultProps = {
  size: 'medium',
  shape: 'circle',
  overlapFrom: 'start'
};
AvatarGroup.propTypes = {
  children: _propTypes.default.node,
  shape: _propTypes.default.oneOf(shapeSet),
  size: _propTypes.default.oneOf(sizeSet),
  maxCount: _propTypes.default.number,
  renderMore: _propTypes.default.func,
  overlapFrom: _propTypes.default.oneOf(overlapFromSet)
};