import React, { cloneElement, Children, useMemo, isValidElement } from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import { stepsClasses as css } from '@douyinfe/semi-foundation/lib/es/steps/constants';

const Steps = props => {
  const {
    size,
    current,
    status,
    children,
    prefixCls,
    initial,
    direction,
    className,
    style,
    hasLine,
    onChange
  } = props;
  const inner = useMemo(() => {
    const filteredChildren = Children.toArray(children).filter(c => /*#__PURE__*/isValidElement(c));
    const content = Children.map(filteredChildren, (child, index) => {
      if (!child) {
        return null;
      }

      const stepNumber = initial + index;
      const childProps = Object.assign({
        stepNumber: "".concat(stepNumber + 1),
        size
      }, child.props);

      if (status === 'error' && index === current - 1) {
        childProps.className = "".concat(prefixCls, "-next-error");
      }

      if (!child.props.status) {
        if (stepNumber === current) {
          childProps.status = status;
        } else if (stepNumber < current) {
          childProps.status = 'finish';
        } else {
          childProps.status = 'wait';
        }
      }

      childProps.active = stepNumber === current;
      childProps.done = stepNumber < current;

      childProps.onChange = () => {
        if (index !== current) {
          onChange(index + initial);
        }
      };

      return /*#__PURE__*/cloneElement(child, Object.assign({}, childProps));
    });
    return content;
  }, [children, initial, prefixCls, direction, status, current, size, onChange]);
  const wrapperCls = cls(className, {
    ["".concat(prefixCls, "-basic")]: true,
    ["".concat(prefixCls, "-").concat(direction)]: true,
    ["".concat(prefixCls, "-").concat(size)]: size !== 'default',
    ["".concat(prefixCls, "-hasline")]: hasLine
  });
  return /*#__PURE__*/React.createElement("div", {
    "aria-label": props["aria-label"],
    className: wrapperCls,
    style: style
  }, inner);
};

Steps.propTypes = {
  prefixCls: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object,
  current: PropTypes.number,
  initial: PropTypes.number,
  direction: PropTypes.oneOf(['horizontal', 'vertical']),
  status: PropTypes.oneOf(['wait', 'process', 'finish', 'error', 'warning']),
  hasLine: PropTypes.bool
};
Steps.defaultProps = {
  prefixCls: css.PREFIX,
  current: 0,
  direction: 'horizontal',
  size: '',
  initial: 0,
  hasLine: true,
  status: 'process'
};
export default Steps;