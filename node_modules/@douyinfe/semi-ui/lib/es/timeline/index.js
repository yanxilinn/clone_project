import React, { PureComponent } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import '@douyinfe/semi-foundation/lib/es/timeline/timeline.css';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/timeline/constants';
import ConfigContext from '../configProvider/context';
import Item from './item';
const prefixCls = cssClasses.PREFIX;

class Timeline extends PureComponent {
  constructor() {
    super(...arguments);

    this.getPosCls = (ele, idx) => {
      const {
        mode
      } = this.props;

      if (mode === 'alternate') {
        if (ele.props.position) {
          return "".concat(prefixCls, "-item-").concat(ele.props.position);
        }

        return idx % 2 === 0 ? "".concat(prefixCls, "-item-left") : "".concat(prefixCls, "-item-right");
      }

      if (mode === 'center') {
        if (ele.props.position) {
          return "".concat(prefixCls, "-item-").concat(ele.props.position);
        }

        return "".concat(prefixCls, "-item-left");
      }

      if (mode === 'left' || mode === 'right') {
        return "".concat(prefixCls, "-item-").concat(mode);
      }

      if (ele.props.position) {
        return "".concat(prefixCls, "-item-").concat(ele.props.position);
      }

      return '';
    };

    this.addClassName = items => React.Children.map(items, (ele, idx) => {
      if ( /*#__PURE__*/React.isValidElement(ele)) {
        return /*#__PURE__*/React.cloneElement(ele, {
          // @ts-ignore
          className: cls(ele.props.className, this.getPosCls(ele, idx))
        });
      }

      return ele;
    });
  }

  render() {
    const {
      children,
      className,
      style,
      mode,
      dataSource
    } = this.props;
    const classString = cls(prefixCls, className, {
      ["".concat(prefixCls, "-").concat(mode)]: mode
    });
    let childrenList;

    if (dataSource && dataSource.length) {
      const items = dataSource.map((item, index) => /*#__PURE__*/React.createElement(Item, Object.assign({
        key: "timeline-item-".concat(index)
      }, item), item.content));
      childrenList = this.addClassName(items);
    }

    const items = childrenList || this.addClassName(children);
    return /*#__PURE__*/React.createElement("ul", {
      "aria-label": this.props['aria-label'],
      style: style,
      className: classString
    }, items);
  }

}

Timeline.contextType = ConfigContext;
Timeline.Item = Item;
Timeline.propTypes = {
  mode: PropTypes.oneOf(strings.MODE),
  className: PropTypes.string,
  style: PropTypes.object,
  dataSource: PropTypes.array
};
Timeline.defaultProps = {
  mode: 'left'
};
export default Timeline;