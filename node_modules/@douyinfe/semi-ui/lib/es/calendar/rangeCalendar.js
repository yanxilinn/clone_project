import _isEqual from "lodash/isEqual";
import React from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types'; // eslint-disable-next-line max-len

import CalendarFoundation from '@douyinfe/semi-foundation/lib/es/calendar/foundation';
import LocaleConsumer from '../locale/localeConsumer';
import localeContext from '../locale/context';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/calendar/constants';
import BaseComponent from '../_base/baseComponent';
import DayCol from './dayCol';
import TimeCol from './timeCol';
import { calcRowHeight } from '@douyinfe/semi-foundation/lib/es/calendar/eventUtil';
import '@douyinfe/semi-foundation/lib/es/calendar/calendar.css';

const toPercent = num => {
  const res = num < 1 ? num * 100 : 100;
  return "".concat(res, "%");
};

const prefixCls = "".concat(cssClasses.PREFIX, "-week");
const allDayCls = "".concat(cssClasses.PREFIX, "-all-day");
export default class RangeCalendar extends BaseComponent {
  constructor(props) {
    super(props);

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.renderDayGrid = () => {
      const {
        parsedEvents
      } = this.state;
      const events = parsedEvents.day;
      const {
        week
      } = this.RangeData;
      const {
        markWeekend,
        dateGridRender
      } = this.props;
      const inner = week.map(day => {
        const dateString = day.date.toString();
        const dayEvents = events.has(dateString) ? events.get(dateString) : [];
        const parsed = this.foundation.getParseDailyEvents(dayEvents, day.date);
        return /*#__PURE__*/React.createElement(DayCol, {
          key: "".concat(dateString, "-weekday"),
          displayValue: day.date,
          scrollHeight: this.state.scrollHeight,
          handleClick: this.handleClick,
          events: parsed.day,
          showCurrTime: this.props.showCurrTime,
          isWeekend: markWeekend && day.isWeekend,
          dateGridRender: dateGridRender
        });
      });
      return inner;
    };

    this.renderHeader = dateFnsLocale => {
      const {
        markWeekend,
        range
      } = this.props;
      const {
        month,
        week
      } = this.foundation.getRangeData(range[0], dateFnsLocale);
      return /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-header")
      }, /*#__PURE__*/React.createElement("ul", {
        className: "".concat(cssClasses.PREFIX, "-tag ").concat(prefixCls, "-tag ").concat(prefixCls, "-sticky-left")
      }, /*#__PURE__*/React.createElement("span", null, month)), /*#__PURE__*/React.createElement("div", {
        role: "gridcell",
        className: "".concat(prefixCls, "-grid")
      }, /*#__PURE__*/React.createElement("ul", {
        className: "".concat(prefixCls, "-grid-row")
      }, week.map(day => {
        const {
          date,
          dayString,
          weekday,
          isToday
        } = day;
        const listCls = cls({
          ["".concat(cssClasses.PREFIX, "-today")]: isToday,
          ["".concat(cssClasses.PREFIX, "-weekend")]: markWeekend && day.isWeekend
        });
        return /*#__PURE__*/React.createElement("li", {
          key: "".concat(date.toString(), "-weekheader"),
          className: listCls
        }, /*#__PURE__*/React.createElement("span", {
          className: "".concat(cssClasses.PREFIX, "-today-date")
        }, dayString), /*#__PURE__*/React.createElement("span", null, weekday));
      }))));
    };

    this.renderAllDayEvents = events => {
      const list = events.map((event, ind) => {
        const {
          leftPos,
          width,
          topInd,
          children
        } = event;
        const top = "".concat(topInd, "em");
        const style = {
          left: toPercent(leftPos),
          width: toPercent(width),
          top
        };
        return /*#__PURE__*/React.createElement("li", {
          className: "".concat(cssClasses.PREFIX, "-event-item ").concat(cssClasses.PREFIX, "-event-allday"),
          key: "allDay-".concat(ind),
          style: style
        }, children);
      });
      return list;
    };

    this.renderAllDay = locale => {
      const {
        allDay
      } = this.state.parsedEvents;
      const parsed = this.foundation.parseRangeAllDayEvents(allDay);
      const maxRowHeight = calcRowHeight(parsed);
      const style = {
        height: "".concat(maxRowHeight, "em")
      };
      const {
        markWeekend
      } = this.props;
      const {
        week
      } = this.RangeData;
      return /*#__PURE__*/React.createElement("div", {
        className: "".concat(allDayCls),
        style: style
      }, /*#__PURE__*/React.createElement("ul", {
        className: "".concat(cssClasses.PREFIX, "-tag ").concat(allDayCls, "-tag ").concat(prefixCls, "-sticky-left")
      }, /*#__PURE__*/React.createElement("span", null, locale.allDay)), /*#__PURE__*/React.createElement("div", {
        role: "gridcell",
        className: "".concat(cssClasses.PREFIX, "-content ").concat(allDayCls, "-content")
      }, /*#__PURE__*/React.createElement("ul", {
        className: "".concat(allDayCls, "-skeleton")
      }, Object.keys(week).map((date, ind) => {
        const listCls = cls({
          ["".concat(cssClasses.PREFIX, "-weekend")]: markWeekend && week[date].isWeekend
        });
        return /*#__PURE__*/React.createElement("li", {
          key: "".concat(date, "-weekgrid"),
          className: listCls
        });
      })), /*#__PURE__*/React.createElement("ul", {
        className: "".concat(cssClasses.PREFIX, "-event-items")
      }, this.renderAllDayEvents(parsed))));
    };

    this.state = {
      scrollHeight: 0,
      parsedEvents: {
        day: new Map(),
        allDay: new Map()
      },
      cachedKeys: []
    };
    this.foundation = new CalendarFoundation(this.adapter);
    this.dom = /*#__PURE__*/React.createRef();
    this.scrollDom = /*#__PURE__*/React.createRef();
    this.handleClick = this.handleClick.bind(this);
    this.allDayRowHeight = 1;
  }

  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      setRangeData: data => {
        this.RangeData = data;
      },
      getRangeData: () => this.RangeData,
      updateScrollHeight: scrollHeight => {
        this.setState({
          scrollHeight
        });
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const {
      scrollHeight
    } = this.scrollDom.current;
    this.dom.current.scrollTop = this.props.scrollTop;
    this.foundation.notifyScrollHeight(scrollHeight);
    this.foundation.parseRangeEvents();
  }

  componentDidUpdate(prevProps, prevState) {
    const prevEventKeys = prevState.cachedKeys;
    const nowEventKeys = this.props.events.map(event => event.key);

    if (!_isEqual(prevEventKeys, nowEventKeys)) {
      this.foundation.parseRangeEvents();
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    const {
      renderTimeDisplay,
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const weekCls = cls(prefixCls, className);
    const weekStyle = Object.assign({
      height,
      width
    }, style);
    return /*#__PURE__*/React.createElement(LocaleConsumer, {
      componentName: "Calendar"
    }, (locale, localeCode, dateFnsLocale) => /*#__PURE__*/React.createElement("div", {
      className: weekCls,
      style: weekStyle,
      ref: this.dom
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-sticky-top")
    }, header, this.renderHeader(dateFnsLocale), this.renderAllDay(locale)), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-scroll-wrapper")
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-scroll"),
      ref: this.scrollDom
    }, /*#__PURE__*/React.createElement(TimeCol, {
      className: "".concat(prefixCls, "-sticky-left"),
      renderTimeDisplay: renderTimeDisplay
    }), this.renderDayGrid()))));
  }

}
RangeCalendar.propTypes = {
  // displayValue: PropTypes.instanceOf(Date),
  range: PropTypes.array,
  header: PropTypes.node,
  events: PropTypes.array,
  mode: PropTypes.string,
  showCurrTime: PropTypes.bool,
  markWeekend: PropTypes.bool,
  scrollTop: PropTypes.number,
  renderTimeDisplay: PropTypes.func,
  dateGridRender: PropTypes.func,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  style: PropTypes.object,
  className: PropTypes.string
};
RangeCalendar.defaultProps = {
  events: [],
  mode: 'range'
};
RangeCalendar.contextType = localeContext;